// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "thrift/schedule"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  User GetUser(i64 id)")
  fmt.Fprintln(os.Stderr, "  Gym GetGym(i64 id)")
  fmt.Fprintln(os.Stderr, "  CourseTeam GetCourseTeam(i64 id)")
  fmt.Fprintln(os.Stderr, "  UserCourse GetUserCourse(i64 id)")
  fmt.Fprintln(os.Stderr, "  UserCourse GetUserCourseByType(i64 gymId, i64 trainerId, i64 courseId, i64 userId, i8 courseType)")
  fmt.Fprintln(os.Stderr, "  CoursePersonal GetCoursePersonal(i64 id)")
  fmt.Fprintln(os.Stderr, "  Reservation GetReservation(i64 id)")
  fmt.Fprintln(os.Stderr, "  Reservation GetUserReservationByCourse(i64 userId, i64 startTime, i8 courseType)")
  fmt.Fprintln(os.Stderr, "   GetReservationsBySchedule(i64 scheduleId)")
  fmt.Fprintln(os.Stderr, "   GetTrainersByGym(i64 gymId, i8 trainerType, string trainerName, string phone)")
  fmt.Fprintln(os.Stderr, "   GetTrainersByScheduleTime(i64 gymId, i64 startTime, i64 endTime)")
  fmt.Fprintln(os.Stderr, "  bool IsEnReservation(i64 scheduleId)")
  fmt.Fprintln(os.Stderr, "  i64 AddLittleTeamCourse(Gym g, CourseTeam ct, i64 startTime, i64 endTime, i64 trainerId, string trainerName, i64 assistantTrainerId, string assistantTrainerName, i8 num)")
  fmt.Fprintln(os.Stderr, "  bool PutLittleTeamCourse(Gym g, CourseTeam ct, i64 scheduleId, i64 startTime, i64 endTime, i64 trainerId, string trainerName, i64 scheduleTrainerId, i64 assistantTrainerId, string assistantTrainerName, i8 num)")
  fmt.Fprintln(os.Stderr, "  bool UserReservationTeamCourse(i64 scheduleId, i64 userId, string userName, i64 userCourseId, i32 remainTimes)")
  fmt.Fprintln(os.Stderr, "  i64 UserReservationPersonalCourse(Gym g, CoursePersonal cp, User u, i64 userCourseId, i64 trainerId, string trainerName, i32 price, i32 remainTimes, i64 startTime, i64 endTime, i8 scheduleType)")
  fmt.Fprintln(os.Stderr, "  i64 TrainerReservationPersonalCourse(Gym g, CoursePersonal cp, User u, i64 userCourseId, i64 trainerId, string trainerName, i32 price, i32 remainTimes, i64 startTime, i64 endTime, string remark,  actionIds)")
  fmt.Fprintln(os.Stderr, "  bool CancelSchedule(i64 scheduleId,  rs)")
  fmt.Fprintln(os.Stderr, "  bool PutTrainer(i64 scheduleId, i64 trainerId, string trainerName, i64 assistantTrainerId, string assistantTrainerName)")
  fmt.Fprintln(os.Stderr, "  bool CancelReservation(i64 scheduleId, i64 userId, i64 userCourseId, i32 remainTimes)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := schedule.NewScheduleClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "GetUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUser requires 1 args")
      flag.Usage()
    }
    argvalue0, err47 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err47 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetGym":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGym requires 1 args")
      flag.Usage()
    }
    argvalue0, err48 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err48 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetGym(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetCourseTeam":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCourseTeam requires 1 args")
      flag.Usage()
    }
    argvalue0, err49 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err49 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCourseTeam(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetUserCourse":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserCourse requires 1 args")
      flag.Usage()
    }
    argvalue0, err50 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err50 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUserCourse(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetUserCourseByType":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetUserCourseByType requires 5 args")
      flag.Usage()
    }
    argvalue0, err51 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err51 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err52 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err52 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err53 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err53 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err54 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err54 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    tmp4, err55 := (strconv.Atoi(flag.Arg(5)))
    if err55 != nil {
      Usage()
      return
    }
    argvalue4 := int8(tmp4)
    value4 := argvalue4
    fmt.Print(client.GetUserCourseByType(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "GetCoursePersonal":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCoursePersonal requires 1 args")
      flag.Usage()
    }
    argvalue0, err56 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err56 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCoursePersonal(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetReservation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetReservation requires 1 args")
      flag.Usage()
    }
    argvalue0, err57 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err57 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetReservation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetUserReservationByCourse":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetUserReservationByCourse requires 3 args")
      flag.Usage()
    }
    argvalue0, err58 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err58 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err59 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err59 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err60 := (strconv.Atoi(flag.Arg(3)))
    if err60 != nil {
      Usage()
      return
    }
    argvalue2 := int8(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetUserReservationByCourse(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetReservationsBySchedule":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetReservationsBySchedule requires 1 args")
      flag.Usage()
    }
    argvalue0, err61 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err61 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetReservationsBySchedule(context.Background(), value0))
    fmt.Print("\n")
    break
  case "GetTrainersByGym":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetTrainersByGym requires 4 args")
      flag.Usage()
    }
    argvalue0, err62 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err62 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err63 := (strconv.Atoi(flag.Arg(2)))
    if err63 != nil {
      Usage()
      return
    }
    argvalue1 := int8(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetTrainersByGym(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "GetTrainersByScheduleTime":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTrainersByScheduleTime requires 3 args")
      flag.Usage()
    }
    argvalue0, err66 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err66 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err67 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err67 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err68 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err68 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetTrainersByScheduleTime(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "IsEnReservation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsEnReservation requires 1 args")
      flag.Usage()
    }
    argvalue0, err69 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err69 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsEnReservation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "AddLittleTeamCourse":
    if flag.NArg() - 1 != 9 {
      fmt.Fprintln(os.Stderr, "AddLittleTeamCourse requires 9 args")
      flag.Usage()
    }
    arg70 := flag.Arg(1)
    mbTrans71 := thrift.NewTMemoryBufferLen(len(arg70))
    defer mbTrans71.Close()
    _, err72 := mbTrans71.WriteString(arg70)
    if err72 != nil {
      Usage()
      return
    }
    factory73 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt74 := factory73.GetProtocol(mbTrans71)
    argvalue0 := schedule.NewGym()
    err75 := argvalue0.Read(jsProt74)
    if err75 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg76 := flag.Arg(2)
    mbTrans77 := thrift.NewTMemoryBufferLen(len(arg76))
    defer mbTrans77.Close()
    _, err78 := mbTrans77.WriteString(arg76)
    if err78 != nil {
      Usage()
      return
    }
    factory79 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt80 := factory79.GetProtocol(mbTrans77)
    argvalue1 := schedule.NewCourseTeam()
    err81 := argvalue1.Read(jsProt80)
    if err81 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err82 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err82 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err83 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err83 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4, err84 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err84 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6, err86 := (strconv.ParseInt(flag.Arg(7), 10, 64))
    if err86 != nil {
      Usage()
      return
    }
    value6 := argvalue6
    argvalue7 := flag.Arg(8)
    value7 := argvalue7
    tmp8, err88 := (strconv.Atoi(flag.Arg(9)))
    if err88 != nil {
      Usage()
      return
    }
    argvalue8 := int8(tmp8)
    value8 := argvalue8
    fmt.Print(client.AddLittleTeamCourse(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7, value8))
    fmt.Print("\n")
    break
  case "PutLittleTeamCourse":
    if flag.NArg() - 1 != 11 {
      fmt.Fprintln(os.Stderr, "PutLittleTeamCourse requires 11 args")
      flag.Usage()
    }
    arg89 := flag.Arg(1)
    mbTrans90 := thrift.NewTMemoryBufferLen(len(arg89))
    defer mbTrans90.Close()
    _, err91 := mbTrans90.WriteString(arg89)
    if err91 != nil {
      Usage()
      return
    }
    factory92 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt93 := factory92.GetProtocol(mbTrans90)
    argvalue0 := schedule.NewGym()
    err94 := argvalue0.Read(jsProt93)
    if err94 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg95 := flag.Arg(2)
    mbTrans96 := thrift.NewTMemoryBufferLen(len(arg95))
    defer mbTrans96.Close()
    _, err97 := mbTrans96.WriteString(arg95)
    if err97 != nil {
      Usage()
      return
    }
    factory98 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt99 := factory98.GetProtocol(mbTrans96)
    argvalue1 := schedule.NewCourseTeam()
    err100 := argvalue1.Read(jsProt99)
    if err100 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err101 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err101 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err102 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err102 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4, err103 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err103 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5, err104 := (strconv.ParseInt(flag.Arg(6), 10, 64))
    if err104 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    argvalue7, err106 := (strconv.ParseInt(flag.Arg(8), 10, 64))
    if err106 != nil {
      Usage()
      return
    }
    value7 := argvalue7
    argvalue8, err107 := (strconv.ParseInt(flag.Arg(9), 10, 64))
    if err107 != nil {
      Usage()
      return
    }
    value8 := argvalue8
    argvalue9 := flag.Arg(10)
    value9 := argvalue9
    tmp10, err109 := (strconv.Atoi(flag.Arg(11)))
    if err109 != nil {
      Usage()
      return
    }
    argvalue10 := int8(tmp10)
    value10 := argvalue10
    fmt.Print(client.PutLittleTeamCourse(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10))
    fmt.Print("\n")
    break
  case "UserReservationTeamCourse":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "UserReservationTeamCourse requires 5 args")
      flag.Usage()
    }
    argvalue0, err110 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err110 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err111 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err111 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3, err113 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err113 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    tmp4, err114 := (strconv.Atoi(flag.Arg(5)))
    if err114 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    fmt.Print(client.UserReservationTeamCourse(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "UserReservationPersonalCourse":
    if flag.NArg() - 1 != 11 {
      fmt.Fprintln(os.Stderr, "UserReservationPersonalCourse requires 11 args")
      flag.Usage()
    }
    arg115 := flag.Arg(1)
    mbTrans116 := thrift.NewTMemoryBufferLen(len(arg115))
    defer mbTrans116.Close()
    _, err117 := mbTrans116.WriteString(arg115)
    if err117 != nil {
      Usage()
      return
    }
    factory118 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt119 := factory118.GetProtocol(mbTrans116)
    argvalue0 := schedule.NewGym()
    err120 := argvalue0.Read(jsProt119)
    if err120 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg121 := flag.Arg(2)
    mbTrans122 := thrift.NewTMemoryBufferLen(len(arg121))
    defer mbTrans122.Close()
    _, err123 := mbTrans122.WriteString(arg121)
    if err123 != nil {
      Usage()
      return
    }
    factory124 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt125 := factory124.GetProtocol(mbTrans122)
    argvalue1 := schedule.NewCoursePersonal()
    err126 := argvalue1.Read(jsProt125)
    if err126 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg127 := flag.Arg(3)
    mbTrans128 := thrift.NewTMemoryBufferLen(len(arg127))
    defer mbTrans128.Close()
    _, err129 := mbTrans128.WriteString(arg127)
    if err129 != nil {
      Usage()
      return
    }
    factory130 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt131 := factory130.GetProtocol(mbTrans128)
    argvalue2 := schedule.NewUser()
    err132 := argvalue2.Read(jsProt131)
    if err132 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err133 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err133 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4, err134 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err134 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    tmp6, err136 := (strconv.Atoi(flag.Arg(7)))
    if err136 != nil {
      Usage()
      return
    }
    argvalue6 := int32(tmp6)
    value6 := argvalue6
    tmp7, err137 := (strconv.Atoi(flag.Arg(8)))
    if err137 != nil {
      Usage()
      return
    }
    argvalue7 := int32(tmp7)
    value7 := argvalue7
    argvalue8, err138 := (strconv.ParseInt(flag.Arg(9), 10, 64))
    if err138 != nil {
      Usage()
      return
    }
    value8 := argvalue8
    argvalue9, err139 := (strconv.ParseInt(flag.Arg(10), 10, 64))
    if err139 != nil {
      Usage()
      return
    }
    value9 := argvalue9
    tmp10, err140 := (strconv.Atoi(flag.Arg(11)))
    if err140 != nil {
      Usage()
      return
    }
    argvalue10 := int8(tmp10)
    value10 := argvalue10
    fmt.Print(client.UserReservationPersonalCourse(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10))
    fmt.Print("\n")
    break
  case "TrainerReservationPersonalCourse":
    if flag.NArg() - 1 != 12 {
      fmt.Fprintln(os.Stderr, "TrainerReservationPersonalCourse requires 12 args")
      flag.Usage()
    }
    arg141 := flag.Arg(1)
    mbTrans142 := thrift.NewTMemoryBufferLen(len(arg141))
    defer mbTrans142.Close()
    _, err143 := mbTrans142.WriteString(arg141)
    if err143 != nil {
      Usage()
      return
    }
    factory144 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt145 := factory144.GetProtocol(mbTrans142)
    argvalue0 := schedule.NewGym()
    err146 := argvalue0.Read(jsProt145)
    if err146 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg147 := flag.Arg(2)
    mbTrans148 := thrift.NewTMemoryBufferLen(len(arg147))
    defer mbTrans148.Close()
    _, err149 := mbTrans148.WriteString(arg147)
    if err149 != nil {
      Usage()
      return
    }
    factory150 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt151 := factory150.GetProtocol(mbTrans148)
    argvalue1 := schedule.NewCoursePersonal()
    err152 := argvalue1.Read(jsProt151)
    if err152 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg153 := flag.Arg(3)
    mbTrans154 := thrift.NewTMemoryBufferLen(len(arg153))
    defer mbTrans154.Close()
    _, err155 := mbTrans154.WriteString(arg153)
    if err155 != nil {
      Usage()
      return
    }
    factory156 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt157 := factory156.GetProtocol(mbTrans154)
    argvalue2 := schedule.NewUser()
    err158 := argvalue2.Read(jsProt157)
    if err158 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err159 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err159 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4, err160 := (strconv.ParseInt(flag.Arg(5), 10, 64))
    if err160 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    tmp6, err162 := (strconv.Atoi(flag.Arg(7)))
    if err162 != nil {
      Usage()
      return
    }
    argvalue6 := int32(tmp6)
    value6 := argvalue6
    tmp7, err163 := (strconv.Atoi(flag.Arg(8)))
    if err163 != nil {
      Usage()
      return
    }
    argvalue7 := int32(tmp7)
    value7 := argvalue7
    argvalue8, err164 := (strconv.ParseInt(flag.Arg(9), 10, 64))
    if err164 != nil {
      Usage()
      return
    }
    value8 := argvalue8
    argvalue9, err165 := (strconv.ParseInt(flag.Arg(10), 10, 64))
    if err165 != nil {
      Usage()
      return
    }
    value9 := argvalue9
    argvalue10 := flag.Arg(11)
    value10 := argvalue10
    arg167 := flag.Arg(12)
    mbTrans168 := thrift.NewTMemoryBufferLen(len(arg167))
    defer mbTrans168.Close()
    _, err169 := mbTrans168.WriteString(arg167)
    if err169 != nil { 
      Usage()
      return
    }
    factory170 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt171 := factory170.GetProtocol(mbTrans168)
    containerStruct11 := schedule.NewScheduleTrainerReservationPersonalCourseArgs()
    err172 := containerStruct11.ReadField12(jsProt171)
    if err172 != nil {
      Usage()
      return
    }
    argvalue11 := containerStruct11.ActionIds
    value11 := argvalue11
    fmt.Print(client.TrainerReservationPersonalCourse(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11))
    fmt.Print("\n")
    break
  case "CancelSchedule":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CancelSchedule requires 2 args")
      flag.Usage()
    }
    argvalue0, err173 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err173 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg174 := flag.Arg(2)
    mbTrans175 := thrift.NewTMemoryBufferLen(len(arg174))
    defer mbTrans175.Close()
    _, err176 := mbTrans175.WriteString(arg174)
    if err176 != nil { 
      Usage()
      return
    }
    factory177 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt178 := factory177.GetProtocol(mbTrans175)
    containerStruct1 := schedule.NewScheduleCancelScheduleArgs()
    err179 := containerStruct1.ReadField2(jsProt178)
    if err179 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Rs
    value1 := argvalue1
    fmt.Print(client.CancelSchedule(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "PutTrainer":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "PutTrainer requires 5 args")
      flag.Usage()
    }
    argvalue0, err180 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err180 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err181 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err181 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3, err183 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err183 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.PutTrainer(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "CancelReservation":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "CancelReservation requires 4 args")
      flag.Usage()
    }
    argvalue0, err185 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err185 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err186 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err186 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err187 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err187 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err188 := (strconv.Atoi(flag.Arg(4)))
    if err188 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.CancelReservation(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
