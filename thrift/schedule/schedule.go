// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package schedule

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
    "github.com/opentracing/opentracing-go"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - ProvinceId
//  - ProvinceName
//  - CityId
//  - CityName
//  - DistrictId
//  - DistrictName
type Gym struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  ProvinceId int32 `thrift:"provinceId,2" db:"provinceId" json:"provinceId"`
  ProvinceName string `thrift:"provinceName,3" db:"provinceName" json:"provinceName"`
  CityId int32 `thrift:"cityId,4" db:"cityId" json:"cityId"`
  CityName string `thrift:"cityName,5" db:"cityName" json:"cityName"`
  DistrictId int32 `thrift:"districtId,6" db:"districtId" json:"districtId"`
  DistrictName string `thrift:"districtName,7" db:"districtName" json:"districtName"`
}

func NewGym() *Gym {
  return &Gym{}
}


func (p *Gym) GetID() int64 {
  return p.ID
}

func (p *Gym) GetProvinceId() int32 {
  return p.ProvinceId
}

func (p *Gym) GetProvinceName() string {
  return p.ProvinceName
}

func (p *Gym) GetCityId() int32 {
  return p.CityId
}

func (p *Gym) GetCityName() string {
  return p.CityName
}

func (p *Gym) GetDistrictId() int32 {
  return p.DistrictId
}

func (p *Gym) GetDistrictName() string {
  return p.DistrictName
}
func (p *Gym) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Gym)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Gym)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProvinceId = v
}
  return nil
}

func (p *Gym)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ProvinceName = v
}
  return nil
}

func (p *Gym)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CityId = v
}
  return nil
}

func (p *Gym)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CityName = v
}
  return nil
}

func (p *Gym)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DistrictId = v
}
  return nil
}

func (p *Gym)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DistrictName = v
}
  return nil
}

func (p *Gym) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Gym"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Gym) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Gym) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provinceId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:provinceId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProvinceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provinceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:provinceId: ", p), err) }
  return err
}

func (p *Gym) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provinceName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:provinceName: ", p), err) }
  if err := oprot.WriteString(string(p.ProvinceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provinceName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:provinceName: ", p), err) }
  return err
}

func (p *Gym) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cityId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cityId: ", p), err) }
  if err := oprot.WriteI32(int32(p.CityId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cityId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cityId: ", p), err) }
  return err
}

func (p *Gym) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cityName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:cityName: ", p), err) }
  if err := oprot.WriteString(string(p.CityName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cityName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:cityName: ", p), err) }
  return err
}

func (p *Gym) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("districtId", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:districtId: ", p), err) }
  if err := oprot.WriteI32(int32(p.DistrictId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.districtId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:districtId: ", p), err) }
  return err
}

func (p *Gym) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("districtName", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:districtName: ", p), err) }
  if err := oprot.WriteString(string(p.DistrictName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.districtName (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:districtName: ", p), err) }
  return err
}

func (p *Gym) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Gym(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Phone
type Trainer struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Phone string `thrift:"phone,3" db:"phone" json:"phone"`
}

func NewTrainer() *Trainer {
  return &Trainer{}
}


func (p *Trainer) GetID() int64 {
  return p.ID
}

func (p *Trainer) GetName() string {
  return p.Name
}

func (p *Trainer) GetPhone() string {
  return p.Phone
}
func (p *Trainer) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Trainer)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Trainer)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Trainer)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *Trainer) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Trainer"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Trainer) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Trainer) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Trainer) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:phone: ", p), err) }
  return err
}

func (p *Trainer) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Trainer(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserName
//  - Phone
type User struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  UserName string `thrift:"userName,2" db:"userName" json:"userName"`
  Phone string `thrift:"phone,3" db:"phone" json:"phone"`
}

func NewUser() *User {
  return &User{}
}


func (p *User) GetID() int64 {
  return p.ID
}

func (p *User) GetUserName() string {
  return p.UserName
}

func (p *User) GetPhone() string {
  return p.Phone
}
func (p *User) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *User)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *User)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *User)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("User"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err) }
  return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:phone: ", p), err) }
  return err
}

func (p *User) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - ID
//  - RemainTimes
//  - CourseType
type UserCourse struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  RemainTimes int32 `thrift:"remainTimes,2" db:"remainTimes" json:"remainTimes"`
  CourseType int8 `thrift:"courseType,3" db:"courseType" json:"courseType"`
}

func NewUserCourse() *UserCourse {
  return &UserCourse{}
}


func (p *UserCourse) GetID() int64 {
  return p.ID
}

func (p *UserCourse) GetRemainTimes() int32 {
  return p.RemainTimes
}

func (p *UserCourse) GetCourseType() int8 {
  return p.CourseType
}
func (p *UserCourse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCourse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *UserCourse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RemainTimes = v
}
  return nil
}

func (p *UserCourse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.CourseType = temp
}
  return nil
}

func (p *UserCourse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserCourse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCourse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *UserCourse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remainTimes", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:remainTimes: ", p), err) }
  if err := oprot.WriteI32(int32(p.RemainTimes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remainTimes (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:remainTimes: ", p), err) }
  return err
}

func (p *UserCourse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("courseType", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:courseType: ", p), err) }
  if err := oprot.WriteByte(int8(p.CourseType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.courseType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:courseType: ", p), err) }
  return err
}

func (p *UserCourse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCourse(%+v)", *p)
}

// Attributes:
//  - ID
//  - CourseName
//  - Intensity
//  - CaloriePerHour
type CourseTeam struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  CourseName string `thrift:"courseName,2" db:"courseName" json:"courseName"`
  Intensity int8 `thrift:"intensity,3" db:"intensity" json:"intensity"`
  CaloriePerHour int32 `thrift:"caloriePerHour,4" db:"caloriePerHour" json:"caloriePerHour"`
}

func NewCourseTeam() *CourseTeam {
  return &CourseTeam{}
}


func (p *CourseTeam) GetID() int64 {
  return p.ID
}

func (p *CourseTeam) GetCourseName() string {
  return p.CourseName
}

func (p *CourseTeam) GetIntensity() int8 {
  return p.Intensity
}

func (p *CourseTeam) GetCaloriePerHour() int32 {
  return p.CaloriePerHour
}
func (p *CourseTeam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CourseTeam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CourseTeam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CourseName = v
}
  return nil
}

func (p *CourseTeam)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.Intensity = temp
}
  return nil
}

func (p *CourseTeam)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CaloriePerHour = v
}
  return nil
}

func (p *CourseTeam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CourseTeam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CourseTeam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CourseTeam) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("courseName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:courseName: ", p), err) }
  if err := oprot.WriteString(string(p.CourseName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.courseName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:courseName: ", p), err) }
  return err
}

func (p *CourseTeam) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("intensity", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:intensity: ", p), err) }
  if err := oprot.WriteByte(int8(p.Intensity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intensity (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:intensity: ", p), err) }
  return err
}

func (p *CourseTeam) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("caloriePerHour", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:caloriePerHour: ", p), err) }
  if err := oprot.WriteI32(int32(p.CaloriePerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.caloriePerHour (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:caloriePerHour: ", p), err) }
  return err
}

func (p *CourseTeam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CourseTeam(%+v)", *p)
}

// Attributes:
//  - ID
//  - CourseName
//  - Intensity
//  - CaloriePerHour
type CoursePersonal struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  CourseName string `thrift:"courseName,2" db:"courseName" json:"courseName"`
  Intensity int8 `thrift:"intensity,3" db:"intensity" json:"intensity"`
  CaloriePerHour int32 `thrift:"caloriePerHour,4" db:"caloriePerHour" json:"caloriePerHour"`
}

func NewCoursePersonal() *CoursePersonal {
  return &CoursePersonal{}
}


func (p *CoursePersonal) GetID() int64 {
  return p.ID
}

func (p *CoursePersonal) GetCourseName() string {
  return p.CourseName
}

func (p *CoursePersonal) GetIntensity() int8 {
  return p.Intensity
}

func (p *CoursePersonal) GetCaloriePerHour() int32 {
  return p.CaloriePerHour
}
func (p *CoursePersonal) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CoursePersonal)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CoursePersonal)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CourseName = v
}
  return nil
}

func (p *CoursePersonal)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.Intensity = temp
}
  return nil
}

func (p *CoursePersonal)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CaloriePerHour = v
}
  return nil
}

func (p *CoursePersonal) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CoursePersonal"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CoursePersonal) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CoursePersonal) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("courseName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:courseName: ", p), err) }
  if err := oprot.WriteString(string(p.CourseName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.courseName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:courseName: ", p), err) }
  return err
}

func (p *CoursePersonal) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("intensity", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:intensity: ", p), err) }
  if err := oprot.WriteByte(int8(p.Intensity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intensity (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:intensity: ", p), err) }
  return err
}

func (p *CoursePersonal) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("caloriePerHour", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:caloriePerHour: ", p), err) }
  if err := oprot.WriteI32(int32(p.CaloriePerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.caloriePerHour (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:caloriePerHour: ", p), err) }
  return err
}

func (p *CoursePersonal) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CoursePersonal(%+v)", *p)
}

// Attributes:
//  - ID
//  - CourseId
//  - CourseName
//  - CourseIntensity
//  - Calorie
//  - GymId
//  - ProvinceId
//  - ProvinceName
//  - CityId
//  - CityName
//  - DistrictId
//  - DistrictName
//  - TrainerId
//  - TrainerName
//  - CourseDate
//  - Price
//  - StartTime
//  - EndTime
//  - CourseType
//  - PeopleNum
//  - ScheduleStatus
//  - Remark
//  - CreateTime
//  - UpdateTime
//  - CourseStatus
//  - ScheduleType
type CourseSchedule struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  CourseId int64 `thrift:"courseId,2" db:"courseId" json:"courseId"`
  CourseName string `thrift:"courseName,3" db:"courseName" json:"courseName"`
  CourseIntensity int8 `thrift:"courseIntensity,4" db:"courseIntensity" json:"courseIntensity"`
  Calorie int32 `thrift:"calorie,5" db:"calorie" json:"calorie"`
  GymId int64 `thrift:"gymId,6" db:"gymId" json:"gymId"`
  ProvinceId int32 `thrift:"provinceId,7" db:"provinceId" json:"provinceId"`
  ProvinceName string `thrift:"provinceName,8" db:"provinceName" json:"provinceName"`
  CityId int32 `thrift:"cityId,9" db:"cityId" json:"cityId"`
  CityName string `thrift:"cityName,10" db:"cityName" json:"cityName"`
  DistrictId int32 `thrift:"districtId,11" db:"districtId" json:"districtId"`
  DistrictName string `thrift:"districtName,12" db:"districtName" json:"districtName"`
  TrainerId int64 `thrift:"trainerId,13" db:"trainerId" json:"trainerId"`
  TrainerName string `thrift:"trainerName,14" db:"trainerName" json:"trainerName"`
  CourseDate int64 `thrift:"CourseDate,15" db:"CourseDate" json:"CourseDate"`
  Price int32 `thrift:"price,16" db:"price" json:"price"`
  StartTime int64 `thrift:"startTime,17" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,18" db:"endTime" json:"endTime"`
  CourseType int32 `thrift:"courseType,19" db:"courseType" json:"courseType"`
  PeopleNum int8 `thrift:"peopleNum,20" db:"peopleNum" json:"peopleNum"`
  ScheduleStatus int32 `thrift:"scheduleStatus,21" db:"scheduleStatus" json:"scheduleStatus"`
  Remark string `thrift:"remark,22" db:"remark" json:"remark"`
  CreateTime int64 `thrift:"createTime,23" db:"createTime" json:"createTime"`
  UpdateTime int64 `thrift:"updateTime,24" db:"updateTime" json:"updateTime"`
  CourseStatus int8 `thrift:"CourseStatus,25" db:"CourseStatus" json:"CourseStatus"`
  ScheduleType int8 `thrift:"ScheduleType,26" db:"ScheduleType" json:"ScheduleType"`
}

func NewCourseSchedule() *CourseSchedule {
  return &CourseSchedule{}
}


func (p *CourseSchedule) GetID() int64 {
  return p.ID
}

func (p *CourseSchedule) GetCourseId() int64 {
  return p.CourseId
}

func (p *CourseSchedule) GetCourseName() string {
  return p.CourseName
}

func (p *CourseSchedule) GetCourseIntensity() int8 {
  return p.CourseIntensity
}

func (p *CourseSchedule) GetCalorie() int32 {
  return p.Calorie
}

func (p *CourseSchedule) GetGymId() int64 {
  return p.GymId
}

func (p *CourseSchedule) GetProvinceId() int32 {
  return p.ProvinceId
}

func (p *CourseSchedule) GetProvinceName() string {
  return p.ProvinceName
}

func (p *CourseSchedule) GetCityId() int32 {
  return p.CityId
}

func (p *CourseSchedule) GetCityName() string {
  return p.CityName
}

func (p *CourseSchedule) GetDistrictId() int32 {
  return p.DistrictId
}

func (p *CourseSchedule) GetDistrictName() string {
  return p.DistrictName
}

func (p *CourseSchedule) GetTrainerId() int64 {
  return p.TrainerId
}

func (p *CourseSchedule) GetTrainerName() string {
  return p.TrainerName
}

func (p *CourseSchedule) GetCourseDate() int64 {
  return p.CourseDate
}

func (p *CourseSchedule) GetPrice() int32 {
  return p.Price
}

func (p *CourseSchedule) GetStartTime() int64 {
  return p.StartTime
}

func (p *CourseSchedule) GetEndTime() int64 {
  return p.EndTime
}

func (p *CourseSchedule) GetCourseType() int32 {
  return p.CourseType
}

func (p *CourseSchedule) GetPeopleNum() int8 {
  return p.PeopleNum
}

func (p *CourseSchedule) GetScheduleStatus() int32 {
  return p.ScheduleStatus
}

func (p *CourseSchedule) GetRemark() string {
  return p.Remark
}

func (p *CourseSchedule) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *CourseSchedule) GetUpdateTime() int64 {
  return p.UpdateTime
}

func (p *CourseSchedule) GetCourseStatus() int8 {
  return p.CourseStatus
}

func (p *CourseSchedule) GetScheduleType() int8 {
  return p.ScheduleType
}
func (p *CourseSchedule) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CourseSchedule)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CourseSchedule)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CourseId = v
}
  return nil
}

func (p *CourseSchedule)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CourseName = v
}
  return nil
}

func (p *CourseSchedule)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := int8(v)
  p.CourseIntensity = temp
}
  return nil
}

func (p *CourseSchedule)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Calorie = v
}
  return nil
}

func (p *CourseSchedule)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.GymId = v
}
  return nil
}

func (p *CourseSchedule)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ProvinceId = v
}
  return nil
}

func (p *CourseSchedule)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ProvinceName = v
}
  return nil
}

func (p *CourseSchedule)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CityId = v
}
  return nil
}

func (p *CourseSchedule)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CityName = v
}
  return nil
}

func (p *CourseSchedule)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.DistrictId = v
}
  return nil
}

func (p *CourseSchedule)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.DistrictName = v
}
  return nil
}

func (p *CourseSchedule)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.TrainerId = v
}
  return nil
}

func (p *CourseSchedule)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.TrainerName = v
}
  return nil
}

func (p *CourseSchedule)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.CourseDate = v
}
  return nil
}

func (p *CourseSchedule)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *CourseSchedule)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *CourseSchedule)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *CourseSchedule)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.CourseType = v
}
  return nil
}

func (p *CourseSchedule)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := int8(v)
  p.PeopleNum = temp
}
  return nil
}

func (p *CourseSchedule)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.ScheduleStatus = v
}
  return nil
}

func (p *CourseSchedule)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *CourseSchedule)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *CourseSchedule)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *CourseSchedule)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  temp := int8(v)
  p.CourseStatus = temp
}
  return nil
}

func (p *CourseSchedule)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  temp := int8(v)
  p.ScheduleType = temp
}
  return nil
}

func (p *CourseSchedule) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CourseSchedule"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CourseSchedule) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("courseId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:courseId: ", p), err) }
  if err := oprot.WriteI64(int64(p.CourseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.courseId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:courseId: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("courseName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:courseName: ", p), err) }
  if err := oprot.WriteString(string(p.CourseName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.courseName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:courseName: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("courseIntensity", thrift.BYTE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:courseIntensity: ", p), err) }
  if err := oprot.WriteByte(int8(p.CourseIntensity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.courseIntensity (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:courseIntensity: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("calorie", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:calorie: ", p), err) }
  if err := oprot.WriteI32(int32(p.Calorie)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.calorie (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:calorie: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gymId", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:gymId: ", p), err) }
  if err := oprot.WriteI64(int64(p.GymId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gymId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:gymId: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provinceId", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:provinceId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProvinceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provinceId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:provinceId: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provinceName", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:provinceName: ", p), err) }
  if err := oprot.WriteString(string(p.ProvinceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provinceName (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:provinceName: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cityId", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:cityId: ", p), err) }
  if err := oprot.WriteI32(int32(p.CityId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cityId (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:cityId: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cityName", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:cityName: ", p), err) }
  if err := oprot.WriteString(string(p.CityName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cityName (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:cityName: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("districtId", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:districtId: ", p), err) }
  if err := oprot.WriteI32(int32(p.DistrictId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.districtId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:districtId: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("districtName", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:districtName: ", p), err) }
  if err := oprot.WriteString(string(p.DistrictName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.districtName (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:districtName: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerId", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:trainerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.TrainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerId (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:trainerId: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerName", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:trainerName: ", p), err) }
  if err := oprot.WriteString(string(p.TrainerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerName (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:trainerName: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CourseDate", thrift.I64, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:CourseDate: ", p), err) }
  if err := oprot.WriteI64(int64(p.CourseDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CourseDate (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:CourseDate: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price", thrift.I32, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:price: ", p), err) }
  if err := oprot.WriteI32(int32(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.price (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:price: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:startTime: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:endTime: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("courseType", thrift.I32, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:courseType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CourseType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.courseType (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:courseType: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("peopleNum", thrift.BYTE, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:peopleNum: ", p), err) }
  if err := oprot.WriteByte(int8(p.PeopleNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.peopleNum (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:peopleNum: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleStatus", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:scheduleStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.ScheduleStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleStatus (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:scheduleStatus: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:remark: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:createTime: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:updateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updateTime (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:updateTime: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CourseStatus", thrift.BYTE, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:CourseStatus: ", p), err) }
  if err := oprot.WriteByte(int8(p.CourseStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CourseStatus (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:CourseStatus: ", p), err) }
  return err
}

func (p *CourseSchedule) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ScheduleType", thrift.BYTE, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:ScheduleType: ", p), err) }
  if err := oprot.WriteByte(int8(p.ScheduleType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ScheduleType (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:ScheduleType: ", p), err) }
  return err
}

func (p *CourseSchedule) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CourseSchedule(%+v)", *p)
}

// Attributes:
//  - ID
//  - CourseId
//  - ScheduleId
//  - OperateId
//  - OperateType
//  - CreateTime
//  - UpdateTime
type CourseScheduleLog struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  CourseId int64 `thrift:"courseId,2" db:"courseId" json:"courseId"`
  ScheduleId int64 `thrift:"scheduleId,3" db:"scheduleId" json:"scheduleId"`
  OperateId int64 `thrift:"operateId,4" db:"operateId" json:"operateId"`
  OperateType int8 `thrift:"OperateType,5" db:"OperateType" json:"OperateType"`
  CreateTime int64 `thrift:"createTime,6" db:"createTime" json:"createTime"`
  UpdateTime int64 `thrift:"updateTime,7" db:"updateTime" json:"updateTime"`
}

func NewCourseScheduleLog() *CourseScheduleLog {
  return &CourseScheduleLog{}
}


func (p *CourseScheduleLog) GetID() int64 {
  return p.ID
}

func (p *CourseScheduleLog) GetCourseId() int64 {
  return p.CourseId
}

func (p *CourseScheduleLog) GetScheduleId() int64 {
  return p.ScheduleId
}

func (p *CourseScheduleLog) GetOperateId() int64 {
  return p.OperateId
}

func (p *CourseScheduleLog) GetOperateType() int8 {
  return p.OperateType
}

func (p *CourseScheduleLog) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *CourseScheduleLog) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *CourseScheduleLog) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CourseScheduleLog)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *CourseScheduleLog)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CourseId = v
}
  return nil
}

func (p *CourseScheduleLog)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ScheduleId = v
}
  return nil
}

func (p *CourseScheduleLog)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OperateId = v
}
  return nil
}

func (p *CourseScheduleLog)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.OperateType = temp
}
  return nil
}

func (p *CourseScheduleLog)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *CourseScheduleLog)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *CourseScheduleLog) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CourseScheduleLog"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CourseScheduleLog) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CourseScheduleLog) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("courseId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:courseId: ", p), err) }
  if err := oprot.WriteI64(int64(p.CourseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.courseId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:courseId: ", p), err) }
  return err
}

func (p *CourseScheduleLog) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:scheduleId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ScheduleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:scheduleId: ", p), err) }
  return err
}

func (p *CourseScheduleLog) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("operateId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:operateId: ", p), err) }
  if err := oprot.WriteI64(int64(p.OperateId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.operateId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:operateId: ", p), err) }
  return err
}

func (p *CourseScheduleLog) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("OperateType", thrift.BYTE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:OperateType: ", p), err) }
  if err := oprot.WriteByte(int8(p.OperateType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.OperateType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:OperateType: ", p), err) }
  return err
}

func (p *CourseScheduleLog) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:createTime: ", p), err) }
  return err
}

func (p *CourseScheduleLog) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:updateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updateTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:updateTime: ", p), err) }
  return err
}

func (p *CourseScheduleLog) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CourseScheduleLog(%+v)", *p)
}

// Attributes:
//  - ID
//  - ScheduleId
//  - UserId
//  - UserName
//  - UserCourseId
//  - ReservationStatus
//  - CreateTime
//  - UpdateTime
type Reservation struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  ScheduleId int64 `thrift:"scheduleId,2" db:"scheduleId" json:"scheduleId"`
  UserId int64 `thrift:"userId,3" db:"userId" json:"userId"`
  UserName string `thrift:"userName,4" db:"userName" json:"userName"`
  UserCourseId int64 `thrift:"userCourseId,5" db:"userCourseId" json:"userCourseId"`
  ReservationStatus int8 `thrift:"reservationStatus,6" db:"reservationStatus" json:"reservationStatus"`
  CreateTime int64 `thrift:"createTime,7" db:"createTime" json:"createTime"`
  UpdateTime int64 `thrift:"updateTime,8" db:"updateTime" json:"updateTime"`
}

func NewReservation() *Reservation {
  return &Reservation{}
}


func (p *Reservation) GetID() int64 {
  return p.ID
}

func (p *Reservation) GetScheduleId() int64 {
  return p.ScheduleId
}

func (p *Reservation) GetUserId() int64 {
  return p.UserId
}

func (p *Reservation) GetUserName() string {
  return p.UserName
}

func (p *Reservation) GetUserCourseId() int64 {
  return p.UserCourseId
}

func (p *Reservation) GetReservationStatus() int8 {
  return p.ReservationStatus
}

func (p *Reservation) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *Reservation) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *Reservation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Reservation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Reservation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ScheduleId = v
}
  return nil
}

func (p *Reservation)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *Reservation)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *Reservation)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UserCourseId = v
}
  return nil
}

func (p *Reservation)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := int8(v)
  p.ReservationStatus = temp
}
  return nil
}

func (p *Reservation)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *Reservation)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *Reservation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Reservation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Reservation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Reservation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scheduleId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ScheduleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scheduleId: ", p), err) }
  return err
}

func (p *Reservation) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userId: ", p), err) }
  return err
}

func (p *Reservation) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userName: ", p), err) }
  return err
}

func (p *Reservation) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userCourseId", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userCourseId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserCourseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userCourseId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userCourseId: ", p), err) }
  return err
}

func (p *Reservation) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reservationStatus", thrift.BYTE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:reservationStatus: ", p), err) }
  if err := oprot.WriteByte(int8(p.ReservationStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reservationStatus (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:reservationStatus: ", p), err) }
  return err
}

func (p *Reservation) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:createTime: ", p), err) }
  return err
}

func (p *Reservation) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:updateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updateTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:updateTime: ", p), err) }
  return err
}

func (p *Reservation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Reservation(%+v)", *p)
}

// Attributes:
//  - ID
//  - ScheduleId
//  - FlowStatus
//  - OperatorId
//  - OperatorType
//  - CreateTime
//  - UpdateTime
type ReservationFlow struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  ScheduleId int64 `thrift:"scheduleId,2" db:"scheduleId" json:"scheduleId"`
  FlowStatus int8 `thrift:"flowStatus,3" db:"flowStatus" json:"flowStatus"`
  OperatorId int64 `thrift:"operatorId,4" db:"operatorId" json:"operatorId"`
  OperatorType int8 `thrift:"operatorType,5" db:"operatorType" json:"operatorType"`
  CreateTime int64 `thrift:"createTime,6" db:"createTime" json:"createTime"`
  UpdateTime int64 `thrift:"updateTime,7" db:"updateTime" json:"updateTime"`
}

func NewReservationFlow() *ReservationFlow {
  return &ReservationFlow{}
}


func (p *ReservationFlow) GetID() int64 {
  return p.ID
}

func (p *ReservationFlow) GetScheduleId() int64 {
  return p.ScheduleId
}

func (p *ReservationFlow) GetFlowStatus() int8 {
  return p.FlowStatus
}

func (p *ReservationFlow) GetOperatorId() int64 {
  return p.OperatorId
}

func (p *ReservationFlow) GetOperatorType() int8 {
  return p.OperatorType
}

func (p *ReservationFlow) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *ReservationFlow) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *ReservationFlow) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReservationFlow)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ReservationFlow)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ScheduleId = v
}
  return nil
}

func (p *ReservationFlow)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.FlowStatus = temp
}
  return nil
}

func (p *ReservationFlow)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OperatorId = v
}
  return nil
}

func (p *ReservationFlow)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.OperatorType = temp
}
  return nil
}

func (p *ReservationFlow)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *ReservationFlow)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *ReservationFlow) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReservationFlow"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReservationFlow) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ReservationFlow) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scheduleId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ScheduleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scheduleId: ", p), err) }
  return err
}

func (p *ReservationFlow) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flowStatus", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flowStatus: ", p), err) }
  if err := oprot.WriteByte(int8(p.FlowStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flowStatus (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flowStatus: ", p), err) }
  return err
}

func (p *ReservationFlow) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("operatorId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:operatorId: ", p), err) }
  if err := oprot.WriteI64(int64(p.OperatorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.operatorId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:operatorId: ", p), err) }
  return err
}

func (p *ReservationFlow) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("operatorType", thrift.BYTE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:operatorType: ", p), err) }
  if err := oprot.WriteByte(int8(p.OperatorType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.operatorType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:operatorType: ", p), err) }
  return err
}

func (p *ReservationFlow) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:createTime: ", p), err) }
  return err
}

func (p *ReservationFlow) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:updateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updateTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:updateTime: ", p), err) }
  return err
}

func (p *ReservationFlow) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReservationFlow(%+v)", *p)
}

// Attributes:
//  - ID
//  - GymId
//  - ScheduleId
//  - TrainerId
//  - TrainerName
//  - Income
//  - CreateTime
//  - UpdateTime
type TrainerIncome struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  GymId int64 `thrift:"gymId,2" db:"gymId" json:"gymId"`
  ScheduleId int64 `thrift:"scheduleId,3" db:"scheduleId" json:"scheduleId"`
  TrainerId int64 `thrift:"trainerId,4" db:"trainerId" json:"trainerId"`
  TrainerName string `thrift:"trainerName,5" db:"trainerName" json:"trainerName"`
  Income int32 `thrift:"income,6" db:"income" json:"income"`
  CreateTime int64 `thrift:"createTime,7" db:"createTime" json:"createTime"`
  UpdateTime int64 `thrift:"updateTime,8" db:"updateTime" json:"updateTime"`
}

func NewTrainerIncome() *TrainerIncome {
  return &TrainerIncome{}
}


func (p *TrainerIncome) GetID() int64 {
  return p.ID
}

func (p *TrainerIncome) GetGymId() int64 {
  return p.GymId
}

func (p *TrainerIncome) GetScheduleId() int64 {
  return p.ScheduleId
}

func (p *TrainerIncome) GetTrainerId() int64 {
  return p.TrainerId
}

func (p *TrainerIncome) GetTrainerName() string {
  return p.TrainerName
}

func (p *TrainerIncome) GetIncome() int32 {
  return p.Income
}

func (p *TrainerIncome) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *TrainerIncome) GetUpdateTime() int64 {
  return p.UpdateTime
}
func (p *TrainerIncome) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TrainerIncome)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TrainerIncome)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GymId = v
}
  return nil
}

func (p *TrainerIncome)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ScheduleId = v
}
  return nil
}

func (p *TrainerIncome)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TrainerId = v
}
  return nil
}

func (p *TrainerIncome)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TrainerName = v
}
  return nil
}

func (p *TrainerIncome)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Income = v
}
  return nil
}

func (p *TrainerIncome)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *TrainerIncome)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *TrainerIncome) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TrainerIncome"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TrainerIncome) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TrainerIncome) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gymId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gymId: ", p), err) }
  if err := oprot.WriteI64(int64(p.GymId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gymId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gymId: ", p), err) }
  return err
}

func (p *TrainerIncome) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:scheduleId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ScheduleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:scheduleId: ", p), err) }
  return err
}

func (p *TrainerIncome) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:trainerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.TrainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:trainerId: ", p), err) }
  return err
}

func (p *TrainerIncome) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:trainerName: ", p), err) }
  if err := oprot.WriteString(string(p.TrainerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:trainerName: ", p), err) }
  return err
}

func (p *TrainerIncome) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("income", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:income: ", p), err) }
  if err := oprot.WriteI32(int32(p.Income)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.income (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:income: ", p), err) }
  return err
}

func (p *TrainerIncome) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:createTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:createTime: ", p), err) }
  return err
}

func (p *TrainerIncome) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:updateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updateTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:updateTime: ", p), err) }
  return err
}

func (p *TrainerIncome) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TrainerIncome(%+v)", *p)
}

type Schedule interface {
  // Parameters:
  //  - ID
  GetUser(ctx context.Context, id int64) (r *User, err error)
  // Parameters:
  //  - ID
  GetGym(ctx context.Context, id int64) (r *Gym, err error)
  // Parameters:
  //  - ID
  GetCourseTeam(ctx context.Context, id int64) (r *CourseTeam, err error)
  // Parameters:
  //  - ID
  GetUserCourse(ctx context.Context, id int64) (r *UserCourse, err error)
  // Parameters:
  //  - GymId
  //  - TrainerId
  //  - CourseId
  //  - UserId
  //  - CourseType
  GetUserCourseByType(ctx context.Context, gymId int64, trainerId int64, courseId int64, userId int64, courseType int8) (r *UserCourse, err error)
  // Parameters:
  //  - ID
  GetCoursePersonal(ctx context.Context, id int64) (r *CoursePersonal, err error)
  // Parameters:
  //  - ID
  GetReservation(ctx context.Context, id int64) (r *Reservation, err error)
  // Parameters:
  //  - UserId
  //  - StartTime
  //  - CourseType
  GetUserReservationByCourse(ctx context.Context, userId int64, startTime int64, courseType int8) (r *Reservation, err error)
  // Parameters:
  //  - ScheduleId
  GetReservationsBySchedule(ctx context.Context, scheduleId int64) (r []*Reservation, err error)
  // Parameters:
  //  - GymId
  //  - TrainerType
  //  - TrainerName
  //  - Phone
  GetTrainersByGym(ctx context.Context, gymId int64, trainerType int8, trainerName string, phone string) (r []*Trainer, err error)
  // Parameters:
  //  - GymId
  //  - StartTime
  //  - EndTime
  GetTrainersByScheduleTime(ctx context.Context, gymId int64, startTime int64, endTime int64) (r []*Trainer, err error)
  // Parameters:
  //  - ScheduleId
  IsEnReservation(ctx context.Context, scheduleId int64) (r bool, err error)
  // Parameters:
  //  - G
  //  - Ct
  //  - StartTime
  //  - EndTime
  //  - TrainerId
  //  - TrainerName
  //  - AssistantTrainerId
  //  - AssistantTrainerName
  //  - Num
  AddLittleTeamCourse(ctx context.Context, g *Gym, ct *CourseTeam, startTime int64, endTime int64, trainerId int64, trainerName string, assistantTrainerId int64, assistantTrainerName string, num int8) (r int64, err error)
  // Parameters:
  //  - G
  //  - Ct
  //  - ScheduleId
  //  - StartTime
  //  - EndTime
  //  - TrainerId
  //  - TrainerName
  //  - ScheduleTrainerId
  //  - AssistantTrainerId
  //  - AssistantTrainerName
  //  - Num
  PutLittleTeamCourse(ctx context.Context, g *Gym, ct *CourseTeam, scheduleId int64, startTime int64, endTime int64, trainerId int64, trainerName string, scheduleTrainerId int64, assistantTrainerId int64, assistantTrainerName string, num int8) (r bool, err error)
  // Parameters:
  //  - ScheduleId
  //  - UserId
  //  - UserName
  //  - UserCourseId
  //  - RemainTimes
  UserReservationTeamCourse(ctx context.Context, scheduleId int64, userId int64, userName string, userCourseId int64, remainTimes int32) (r bool, err error)
  // Parameters:
  //  - G
  //  - Cp
  //  - U
  //  - UserCourseId
  //  - TrainerId
  //  - TrainerName
  //  - Price
  //  - RemainTimes
  //  - StartTime
  //  - EndTime
  //  - ScheduleType
  UserReservationPersonalCourse(ctx context.Context, g *Gym, cp *CoursePersonal, u *User, userCourseId int64, trainerId int64, trainerName string, price int32, remainTimes int32, startTime int64, endTime int64, scheduleType int8) (r int64, err error)
  // Parameters:
  //  - G
  //  - Cp
  //  - U
  //  - UserCourseId
  //  - TrainerId
  //  - TrainerName
  //  - Price
  //  - RemainTimes
  //  - StartTime
  //  - EndTime
  //  - Remark
  //  - ActionIds
  TrainerReservationPersonalCourse(ctx context.Context, g *Gym, cp *CoursePersonal, u *User, userCourseId int64, trainerId int64, trainerName string, price int32, remainTimes int32, startTime int64, endTime int64, remark string, actionIds []int64) (r int64, err error)
  // Parameters:
  //  - ScheduleId
  //  - Rs
  CancelSchedule(ctx context.Context, scheduleId int64, rs []*Reservation) (r bool, err error)
  // Parameters:
  //  - ScheduleId
  //  - TrainerId
  //  - TrainerName
  //  - AssistantTrainerId
  //  - AssistantTrainerName
  PutTrainer(ctx context.Context, scheduleId int64, trainerId int64, trainerName string, assistantTrainerId int64, assistantTrainerName string) (r bool, err error)
  // Parameters:
  //  - ScheduleId
  //  - UserId
  //  - UserCourseId
  //  - RemainTimes
  CancelReservation(ctx context.Context, scheduleId int64, userId int64, userCourseId int64, remainTimes int32) (r bool, err error)
}

type ScheduleClient struct {
  c thrift.TClient
}

// Deprecated: Use NewSchedule instead
func NewScheduleClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ScheduleClient {
  return &ScheduleClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewSchedule instead
func NewScheduleClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ScheduleClient {
  return &ScheduleClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewScheduleClient(c thrift.TClient) *ScheduleClient {
  return &ScheduleClient{
    c: c,
  }
}

// Parameters:
//  - ID
func (p *ScheduleClient) GetUser(ctx context.Context, id int64) (r *User, err error) {
  var _args0 ScheduleGetUserArgs
  _args0.ID = id
  var _result1 ScheduleGetUserResult
  if err = p.c.Call(ctx, "GetUser", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ScheduleClient) GetGym(ctx context.Context, id int64) (r *Gym, err error) {
  var _args2 ScheduleGetGymArgs
  _args2.ID = id
  var _result3 ScheduleGetGymResult
  if err = p.c.Call(ctx, "GetGym", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ScheduleClient) GetCourseTeam(ctx context.Context, id int64) (r *CourseTeam, err error) {
  var _args4 ScheduleGetCourseTeamArgs
  _args4.ID = id
  var _result5 ScheduleGetCourseTeamResult
  if err = p.c.Call(ctx, "GetCourseTeam", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ScheduleClient) GetUserCourse(ctx context.Context, id int64) (r *UserCourse, err error) {
  var _args6 ScheduleGetUserCourseArgs
  _args6.ID = id
  var _result7 ScheduleGetUserCourseResult
  if err = p.c.Call(ctx, "GetUserCourse", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - GymId
//  - TrainerId
//  - CourseId
//  - UserId
//  - CourseType
func (p *ScheduleClient) GetUserCourseByType(ctx context.Context, gymId int64, trainerId int64, courseId int64, userId int64, courseType int8) (r *UserCourse, err error) {
  var _args8 ScheduleGetUserCourseByTypeArgs
  _args8.GymId = gymId
  _args8.TrainerId = trainerId
  _args8.CourseId = courseId
  _args8.UserId = userId
  _args8.CourseType = courseType
  var _result9 ScheduleGetUserCourseByTypeResult
  if err = p.c.Call(ctx, "GetUserCourseByType", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ScheduleClient) GetCoursePersonal(ctx context.Context, id int64) (r *CoursePersonal, err error) {
  var _args10 ScheduleGetCoursePersonalArgs
  _args10.ID = id
  var _result11 ScheduleGetCoursePersonalResult
  if err = p.c.Call(ctx, "GetCoursePersonal", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ScheduleClient) GetReservation(ctx context.Context, id int64) (r *Reservation, err error) {
  var _args12 ScheduleGetReservationArgs
  _args12.ID = id
  var _result13 ScheduleGetReservationResult
  if err = p.c.Call(ctx, "GetReservation", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - UserId
//  - StartTime
//  - CourseType
func (p *ScheduleClient) GetUserReservationByCourse(ctx context.Context, userId int64, startTime int64, courseType int8) (r *Reservation, err error) {
  var _args14 ScheduleGetUserReservationByCourseArgs
  _args14.UserId = userId
  _args14.StartTime = startTime
  _args14.CourseType = courseType
  var _result15 ScheduleGetUserReservationByCourseResult
  if err = p.c.Call(ctx, "GetUserReservationByCourse", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - ScheduleId
func (p *ScheduleClient) GetReservationsBySchedule(ctx context.Context, scheduleId int64) (r []*Reservation, err error) {
  var _args16 ScheduleGetReservationsByScheduleArgs
  _args16.ScheduleId = scheduleId
  var _result17 ScheduleGetReservationsByScheduleResult
  if err = p.c.Call(ctx, "GetReservationsBySchedule", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// Parameters:
//  - GymId
//  - TrainerType
//  - TrainerName
//  - Phone
func (p *ScheduleClient) GetTrainersByGym(ctx context.Context, gymId int64, trainerType int8, trainerName string, phone string) (r []*Trainer, err error) {
  var _args18 ScheduleGetTrainersByGymArgs
  _args18.GymId = gymId
  _args18.TrainerType = trainerType
  _args18.TrainerName = trainerName
  _args18.Phone = phone
  var _result19 ScheduleGetTrainersByGymResult
  if err = p.c.Call(ctx, "GetTrainersByGym", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

// Parameters:
//  - GymId
//  - StartTime
//  - EndTime
func (p *ScheduleClient) GetTrainersByScheduleTime(ctx context.Context, gymId int64, startTime int64, endTime int64) (r []*Trainer, err error) {
  var _args20 ScheduleGetTrainersByScheduleTimeArgs
  _args20.GymId = gymId
  _args20.StartTime = startTime
  _args20.EndTime = endTime
  var _result21 ScheduleGetTrainersByScheduleTimeResult
  if err = p.c.Call(ctx, "GetTrainersByScheduleTime", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - ScheduleId
func (p *ScheduleClient) IsEnReservation(ctx context.Context, scheduleId int64) (r bool, err error) {
  var _args22 ScheduleIsEnReservationArgs
  _args22.ScheduleId = scheduleId
  var _result23 ScheduleIsEnReservationResult
  if err = p.c.Call(ctx, "IsEnReservation", &_args22, &_result23); err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

// Parameters:
//  - G
//  - Ct
//  - StartTime
//  - EndTime
//  - TrainerId
//  - TrainerName
//  - AssistantTrainerId
//  - AssistantTrainerName
//  - Num
func (p *ScheduleClient) AddLittleTeamCourse(ctx context.Context, g *Gym, ct *CourseTeam, startTime int64, endTime int64, trainerId int64, trainerName string, assistantTrainerId int64, assistantTrainerName string, num int8) (r int64, err error) {
  var _args24 ScheduleAddLittleTeamCourseArgs
  _args24.G = g
  _args24.Ct = ct
  _args24.StartTime = startTime
  _args24.EndTime = endTime
  _args24.TrainerId = trainerId
  _args24.TrainerName = trainerName
  _args24.AssistantTrainerId = assistantTrainerId
  _args24.AssistantTrainerName = assistantTrainerName
  _args24.Num = num
  var _result25 ScheduleAddLittleTeamCourseResult
  if err = p.c.Call(ctx, "AddLittleTeamCourse", &_args24, &_result25); err != nil {
    return
  }
  return _result25.GetSuccess(), nil
}

// Parameters:
//  - G
//  - Ct
//  - ScheduleId
//  - StartTime
//  - EndTime
//  - TrainerId
//  - TrainerName
//  - ScheduleTrainerId
//  - AssistantTrainerId
//  - AssistantTrainerName
//  - Num
func (p *ScheduleClient) PutLittleTeamCourse(ctx context.Context, g *Gym, ct *CourseTeam, scheduleId int64, startTime int64, endTime int64, trainerId int64, trainerName string, scheduleTrainerId int64, assistantTrainerId int64, assistantTrainerName string, num int8) (r bool, err error) {
  var _args26 SchedulePutLittleTeamCourseArgs
  _args26.G = g
  _args26.Ct = ct
  _args26.ScheduleId = scheduleId
  _args26.StartTime = startTime
  _args26.EndTime = endTime
  _args26.TrainerId = trainerId
  _args26.TrainerName = trainerName
  _args26.ScheduleTrainerId = scheduleTrainerId
  _args26.AssistantTrainerId = assistantTrainerId
  _args26.AssistantTrainerName = assistantTrainerName
  _args26.Num = num
  var _result27 SchedulePutLittleTeamCourseResult
  if err = p.c.Call(ctx, "PutLittleTeamCourse", &_args26, &_result27); err != nil {
    return
  }
  return _result27.GetSuccess(), nil
}

// Parameters:
//  - ScheduleId
//  - UserId
//  - UserName
//  - UserCourseId
//  - RemainTimes
func (p *ScheduleClient) UserReservationTeamCourse(ctx context.Context, scheduleId int64, userId int64, userName string, userCourseId int64, remainTimes int32) (r bool, err error) {
  var _args28 ScheduleUserReservationTeamCourseArgs
  _args28.ScheduleId = scheduleId
  _args28.UserId = userId
  _args28.UserName = userName
  _args28.UserCourseId = userCourseId
  _args28.RemainTimes = remainTimes
  var _result29 ScheduleUserReservationTeamCourseResult
  if err = p.c.Call(ctx, "UserReservationTeamCourse", &_args28, &_result29); err != nil {
    return
  }
  return _result29.GetSuccess(), nil
}

// Parameters:
//  - G
//  - Cp
//  - U
//  - UserCourseId
//  - TrainerId
//  - TrainerName
//  - Price
//  - RemainTimes
//  - StartTime
//  - EndTime
//  - ScheduleType
func (p *ScheduleClient) UserReservationPersonalCourse(ctx context.Context, g *Gym, cp *CoursePersonal, u *User, userCourseId int64, trainerId int64, trainerName string, price int32, remainTimes int32, startTime int64, endTime int64, scheduleType int8) (r int64, err error) {
  var _args30 ScheduleUserReservationPersonalCourseArgs
  _args30.G = g
  _args30.Cp = cp
  _args30.U = u
  _args30.UserCourseId = userCourseId
  _args30.TrainerId = trainerId
  _args30.TrainerName = trainerName
  _args30.Price = price
  _args30.RemainTimes = remainTimes
  _args30.StartTime = startTime
  _args30.EndTime = endTime
  _args30.ScheduleType = scheduleType
  var _result31 ScheduleUserReservationPersonalCourseResult
  if err = p.c.Call(ctx, "UserReservationPersonalCourse", &_args30, &_result31); err != nil {
    return
  }
  return _result31.GetSuccess(), nil
}

// Parameters:
//  - G
//  - Cp
//  - U
//  - UserCourseId
//  - TrainerId
//  - TrainerName
//  - Price
//  - RemainTimes
//  - StartTime
//  - EndTime
//  - Remark
//  - ActionIds
func (p *ScheduleClient) TrainerReservationPersonalCourse(ctx context.Context, g *Gym, cp *CoursePersonal, u *User, userCourseId int64, trainerId int64, trainerName string, price int32, remainTimes int32, startTime int64, endTime int64, remark string, actionIds []int64) (r int64, err error) {
  var _args32 ScheduleTrainerReservationPersonalCourseArgs
  _args32.G = g
  _args32.Cp = cp
  _args32.U = u
  _args32.UserCourseId = userCourseId
  _args32.TrainerId = trainerId
  _args32.TrainerName = trainerName
  _args32.Price = price
  _args32.RemainTimes = remainTimes
  _args32.StartTime = startTime
  _args32.EndTime = endTime
  _args32.Remark = remark
  _args32.ActionIds = actionIds
  var _result33 ScheduleTrainerReservationPersonalCourseResult
  if err = p.c.Call(ctx, "TrainerReservationPersonalCourse", &_args32, &_result33); err != nil {
    return
  }
  return _result33.GetSuccess(), nil
}

// Parameters:
//  - ScheduleId
//  - Rs
func (p *ScheduleClient) CancelSchedule(ctx context.Context, scheduleId int64, rs []*Reservation) (r bool, err error) {
  var _args34 ScheduleCancelScheduleArgs
  _args34.ScheduleId = scheduleId
  _args34.Rs = rs
  var _result35 ScheduleCancelScheduleResult
  if err = p.c.Call(ctx, "CancelSchedule", &_args34, &_result35); err != nil {
    return
  }
  return _result35.GetSuccess(), nil
}

// Parameters:
//  - ScheduleId
//  - TrainerId
//  - TrainerName
//  - AssistantTrainerId
//  - AssistantTrainerName
func (p *ScheduleClient) PutTrainer(ctx context.Context, scheduleId int64, trainerId int64, trainerName string, assistantTrainerId int64, assistantTrainerName string) (r bool, err error) {
  var _args36 SchedulePutTrainerArgs
  _args36.ScheduleId = scheduleId
  _args36.TrainerId = trainerId
  _args36.TrainerName = trainerName
  _args36.AssistantTrainerId = assistantTrainerId
  _args36.AssistantTrainerName = assistantTrainerName
  var _result37 SchedulePutTrainerResult
  if err = p.c.Call(ctx, "PutTrainer", &_args36, &_result37); err != nil {
    return
  }
  return _result37.GetSuccess(), nil
}

// Parameters:
//  - ScheduleId
//  - UserId
//  - UserCourseId
//  - RemainTimes
func (p *ScheduleClient) CancelReservation(ctx context.Context, scheduleId int64, userId int64, userCourseId int64, remainTimes int32) (r bool, err error) {
  var _args38 ScheduleCancelReservationArgs
  _args38.ScheduleId = scheduleId
  _args38.UserId = userId
  _args38.UserCourseId = userCourseId
  _args38.RemainTimes = remainTimes
  var _result39 ScheduleCancelReservationResult
  if err = p.c.Call(ctx, "CancelReservation", &_args38, &_result39); err != nil {
    return
  }
  return _result39.GetSuccess(), nil
}

type ScheduleProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Schedule
}

func (p *ScheduleProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ScheduleProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ScheduleProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewScheduleProcessor(handler Schedule) *ScheduleProcessor {

  self40 := &ScheduleProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self40.processorMap["GetUser"] = &scheduleProcessorGetUser{handler:handler}
  self40.processorMap["GetGym"] = &scheduleProcessorGetGym{handler:handler}
  self40.processorMap["GetCourseTeam"] = &scheduleProcessorGetCourseTeam{handler:handler}
  self40.processorMap["GetUserCourse"] = &scheduleProcessorGetUserCourse{handler:handler}
  self40.processorMap["GetUserCourseByType"] = &scheduleProcessorGetUserCourseByType{handler:handler}
  self40.processorMap["GetCoursePersonal"] = &scheduleProcessorGetCoursePersonal{handler:handler}
  self40.processorMap["GetReservation"] = &scheduleProcessorGetReservation{handler:handler}
  self40.processorMap["GetUserReservationByCourse"] = &scheduleProcessorGetUserReservationByCourse{handler:handler}
  self40.processorMap["GetReservationsBySchedule"] = &scheduleProcessorGetReservationsBySchedule{handler:handler}
  self40.processorMap["GetTrainersByGym"] = &scheduleProcessorGetTrainersByGym{handler:handler}
  self40.processorMap["GetTrainersByScheduleTime"] = &scheduleProcessorGetTrainersByScheduleTime{handler:handler}
  self40.processorMap["IsEnReservation"] = &scheduleProcessorIsEnReservation{handler:handler}
  self40.processorMap["AddLittleTeamCourse"] = &scheduleProcessorAddLittleTeamCourse{handler:handler}
  self40.processorMap["PutLittleTeamCourse"] = &scheduleProcessorPutLittleTeamCourse{handler:handler}
  self40.processorMap["UserReservationTeamCourse"] = &scheduleProcessorUserReservationTeamCourse{handler:handler}
  self40.processorMap["UserReservationPersonalCourse"] = &scheduleProcessorUserReservationPersonalCourse{handler:handler}
  self40.processorMap["TrainerReservationPersonalCourse"] = &scheduleProcessorTrainerReservationPersonalCourse{handler:handler}
  self40.processorMap["CancelSchedule"] = &scheduleProcessorCancelSchedule{handler:handler}
  self40.processorMap["PutTrainer"] = &scheduleProcessorPutTrainer{handler:handler}
  self40.processorMap["CancelReservation"] = &scheduleProcessorCancelReservation{handler:handler}
return self40
}

func (p *ScheduleProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    span := opentracing.StartSpan("service." + name)
    defer func() {
      if err != nil {
        span.SetTag("error", err)
      }
      span.Finish()
    }()
    ctx := opentracing.ContextWithSpan(ctx, span)
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x41 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x41.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x41

}

type scheduleProcessorGetUser struct {
  handler Schedule
}

func (p *scheduleProcessorGetUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleGetUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleGetUserResult{}
var retval *User
  var err2 error
  if retval, err2 = p.handler.GetUser(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUser: " + err2.Error())
    oprot.WriteMessageBegin("GetUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorGetGym struct {
  handler Schedule
}

func (p *scheduleProcessorGetGym) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleGetGymArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetGym", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleGetGymResult{}
var retval *Gym
  var err2 error
  if retval, err2 = p.handler.GetGym(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetGym: " + err2.Error())
    oprot.WriteMessageBegin("GetGym", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetGym", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorGetCourseTeam struct {
  handler Schedule
}

func (p *scheduleProcessorGetCourseTeam) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleGetCourseTeamArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetCourseTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleGetCourseTeamResult{}
var retval *CourseTeam
  var err2 error
  if retval, err2 = p.handler.GetCourseTeam(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCourseTeam: " + err2.Error())
    oprot.WriteMessageBegin("GetCourseTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetCourseTeam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorGetUserCourse struct {
  handler Schedule
}

func (p *scheduleProcessorGetUserCourse) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleGetUserCourseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUserCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleGetUserCourseResult{}
var retval *UserCourse
  var err2 error
  if retval, err2 = p.handler.GetUserCourse(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserCourse: " + err2.Error())
    oprot.WriteMessageBegin("GetUserCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetUserCourse", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorGetUserCourseByType struct {
  handler Schedule
}

func (p *scheduleProcessorGetUserCourseByType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleGetUserCourseByTypeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUserCourseByType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleGetUserCourseByTypeResult{}
var retval *UserCourse
  var err2 error
  if retval, err2 = p.handler.GetUserCourseByType(ctx, args.GymId, args.TrainerId, args.CourseId, args.UserId, args.CourseType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserCourseByType: " + err2.Error())
    oprot.WriteMessageBegin("GetUserCourseByType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetUserCourseByType", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorGetCoursePersonal struct {
  handler Schedule
}

func (p *scheduleProcessorGetCoursePersonal) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleGetCoursePersonalArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetCoursePersonal", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleGetCoursePersonalResult{}
var retval *CoursePersonal
  var err2 error
  if retval, err2 = p.handler.GetCoursePersonal(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCoursePersonal: " + err2.Error())
    oprot.WriteMessageBegin("GetCoursePersonal", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetCoursePersonal", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorGetReservation struct {
  handler Schedule
}

func (p *scheduleProcessorGetReservation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleGetReservationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetReservation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleGetReservationResult{}
var retval *Reservation
  var err2 error
  if retval, err2 = p.handler.GetReservation(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetReservation: " + err2.Error())
    oprot.WriteMessageBegin("GetReservation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetReservation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorGetUserReservationByCourse struct {
  handler Schedule
}

func (p *scheduleProcessorGetUserReservationByCourse) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleGetUserReservationByCourseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUserReservationByCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleGetUserReservationByCourseResult{}
var retval *Reservation
  var err2 error
  if retval, err2 = p.handler.GetUserReservationByCourse(ctx, args.UserId, args.StartTime, args.CourseType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserReservationByCourse: " + err2.Error())
    oprot.WriteMessageBegin("GetUserReservationByCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetUserReservationByCourse", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorGetReservationsBySchedule struct {
  handler Schedule
}

func (p *scheduleProcessorGetReservationsBySchedule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleGetReservationsByScheduleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetReservationsBySchedule", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleGetReservationsByScheduleResult{}
var retval []*Reservation
  var err2 error
  if retval, err2 = p.handler.GetReservationsBySchedule(ctx, args.ScheduleId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetReservationsBySchedule: " + err2.Error())
    oprot.WriteMessageBegin("GetReservationsBySchedule", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetReservationsBySchedule", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorGetTrainersByGym struct {
  handler Schedule
}

func (p *scheduleProcessorGetTrainersByGym) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleGetTrainersByGymArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetTrainersByGym", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleGetTrainersByGymResult{}
var retval []*Trainer
  var err2 error
  if retval, err2 = p.handler.GetTrainersByGym(ctx, args.GymId, args.TrainerType, args.TrainerName, args.Phone); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTrainersByGym: " + err2.Error())
    oprot.WriteMessageBegin("GetTrainersByGym", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetTrainersByGym", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorGetTrainersByScheduleTime struct {
  handler Schedule
}

func (p *scheduleProcessorGetTrainersByScheduleTime) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleGetTrainersByScheduleTimeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetTrainersByScheduleTime", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleGetTrainersByScheduleTimeResult{}
var retval []*Trainer
  var err2 error
  if retval, err2 = p.handler.GetTrainersByScheduleTime(ctx, args.GymId, args.StartTime, args.EndTime); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTrainersByScheduleTime: " + err2.Error())
    oprot.WriteMessageBegin("GetTrainersByScheduleTime", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetTrainersByScheduleTime", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorIsEnReservation struct {
  handler Schedule
}

func (p *scheduleProcessorIsEnReservation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleIsEnReservationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("IsEnReservation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleIsEnReservationResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.IsEnReservation(ctx, args.ScheduleId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsEnReservation: " + err2.Error())
    oprot.WriteMessageBegin("IsEnReservation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("IsEnReservation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorAddLittleTeamCourse struct {
  handler Schedule
}

func (p *scheduleProcessorAddLittleTeamCourse) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleAddLittleTeamCourseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AddLittleTeamCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleAddLittleTeamCourseResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.AddLittleTeamCourse(ctx, args.G, args.Ct, args.StartTime, args.EndTime, args.TrainerId, args.TrainerName, args.AssistantTrainerId, args.AssistantTrainerName, args.Num); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddLittleTeamCourse: " + err2.Error())
    oprot.WriteMessageBegin("AddLittleTeamCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("AddLittleTeamCourse", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorPutLittleTeamCourse struct {
  handler Schedule
}

func (p *scheduleProcessorPutLittleTeamCourse) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SchedulePutLittleTeamCourseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("PutLittleTeamCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SchedulePutLittleTeamCourseResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.PutLittleTeamCourse(ctx, args.G, args.Ct, args.ScheduleId, args.StartTime, args.EndTime, args.TrainerId, args.TrainerName, args.ScheduleTrainerId, args.AssistantTrainerId, args.AssistantTrainerName, args.Num); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PutLittleTeamCourse: " + err2.Error())
    oprot.WriteMessageBegin("PutLittleTeamCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("PutLittleTeamCourse", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorUserReservationTeamCourse struct {
  handler Schedule
}

func (p *scheduleProcessorUserReservationTeamCourse) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleUserReservationTeamCourseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserReservationTeamCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleUserReservationTeamCourseResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UserReservationTeamCourse(ctx, args.ScheduleId, args.UserId, args.UserName, args.UserCourseId, args.RemainTimes); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserReservationTeamCourse: " + err2.Error())
    oprot.WriteMessageBegin("UserReservationTeamCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserReservationTeamCourse", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorUserReservationPersonalCourse struct {
  handler Schedule
}

func (p *scheduleProcessorUserReservationPersonalCourse) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleUserReservationPersonalCourseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UserReservationPersonalCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleUserReservationPersonalCourseResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.UserReservationPersonalCourse(ctx, args.G, args.Cp, args.U, args.UserCourseId, args.TrainerId, args.TrainerName, args.Price, args.RemainTimes, args.StartTime, args.EndTime, args.ScheduleType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserReservationPersonalCourse: " + err2.Error())
    oprot.WriteMessageBegin("UserReservationPersonalCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UserReservationPersonalCourse", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorTrainerReservationPersonalCourse struct {
  handler Schedule
}

func (p *scheduleProcessorTrainerReservationPersonalCourse) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleTrainerReservationPersonalCourseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("TrainerReservationPersonalCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleTrainerReservationPersonalCourseResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.TrainerReservationPersonalCourse(ctx, args.G, args.Cp, args.U, args.UserCourseId, args.TrainerId, args.TrainerName, args.Price, args.RemainTimes, args.StartTime, args.EndTime, args.Remark, args.ActionIds); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TrainerReservationPersonalCourse: " + err2.Error())
    oprot.WriteMessageBegin("TrainerReservationPersonalCourse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("TrainerReservationPersonalCourse", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorCancelSchedule struct {
  handler Schedule
}

func (p *scheduleProcessorCancelSchedule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleCancelScheduleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CancelSchedule", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleCancelScheduleResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CancelSchedule(ctx, args.ScheduleId, args.Rs); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CancelSchedule: " + err2.Error())
    oprot.WriteMessageBegin("CancelSchedule", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("CancelSchedule", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorPutTrainer struct {
  handler Schedule
}

func (p *scheduleProcessorPutTrainer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SchedulePutTrainerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("PutTrainer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SchedulePutTrainerResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.PutTrainer(ctx, args.ScheduleId, args.TrainerId, args.TrainerName, args.AssistantTrainerId, args.AssistantTrainerName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PutTrainer: " + err2.Error())
    oprot.WriteMessageBegin("PutTrainer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("PutTrainer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type scheduleProcessorCancelReservation struct {
  handler Schedule
}

func (p *scheduleProcessorCancelReservation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ScheduleCancelReservationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CancelReservation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ScheduleCancelReservationResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CancelReservation(ctx, args.ScheduleId, args.UserId, args.UserCourseId, args.RemainTimes); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CancelReservation: " + err2.Error())
    oprot.WriteMessageBegin("CancelReservation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("CancelReservation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ID
type ScheduleGetUserArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewScheduleGetUserArgs() *ScheduleGetUserArgs {
  return &ScheduleGetUserArgs{}
}


func (p *ScheduleGetUserArgs) GetID() int64 {
  return p.ID
}
func (p *ScheduleGetUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ScheduleGetUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ScheduleGetUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleGetUserResult struct {
  Success *User `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleGetUserResult() *ScheduleGetUserResult {
  return &ScheduleGetUserResult{}
}

var ScheduleGetUserResult_Success_DEFAULT *User
func (p *ScheduleGetUserResult) GetSuccess() *User {
  if !p.IsSetSuccess() {
    return ScheduleGetUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *ScheduleGetUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleGetUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &User{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ScheduleGetUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleGetUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetUserResult(%+v)", *p)
}

// Attributes:
//  - ID
type ScheduleGetGymArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewScheduleGetGymArgs() *ScheduleGetGymArgs {
  return &ScheduleGetGymArgs{}
}


func (p *ScheduleGetGymArgs) GetID() int64 {
  return p.ID
}
func (p *ScheduleGetGymArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetGymArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ScheduleGetGymArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetGym_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetGymArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ScheduleGetGymArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetGymArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleGetGymResult struct {
  Success *Gym `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleGetGymResult() *ScheduleGetGymResult {
  return &ScheduleGetGymResult{}
}

var ScheduleGetGymResult_Success_DEFAULT *Gym
func (p *ScheduleGetGymResult) GetSuccess() *Gym {
  if !p.IsSetSuccess() {
    return ScheduleGetGymResult_Success_DEFAULT
  }
return p.Success
}
func (p *ScheduleGetGymResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleGetGymResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetGymResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Gym{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ScheduleGetGymResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetGym_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetGymResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleGetGymResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetGymResult(%+v)", *p)
}

// Attributes:
//  - ID
type ScheduleGetCourseTeamArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewScheduleGetCourseTeamArgs() *ScheduleGetCourseTeamArgs {
  return &ScheduleGetCourseTeamArgs{}
}


func (p *ScheduleGetCourseTeamArgs) GetID() int64 {
  return p.ID
}
func (p *ScheduleGetCourseTeamArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetCourseTeamArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ScheduleGetCourseTeamArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCourseTeam_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetCourseTeamArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ScheduleGetCourseTeamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetCourseTeamArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleGetCourseTeamResult struct {
  Success *CourseTeam `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleGetCourseTeamResult() *ScheduleGetCourseTeamResult {
  return &ScheduleGetCourseTeamResult{}
}

var ScheduleGetCourseTeamResult_Success_DEFAULT *CourseTeam
func (p *ScheduleGetCourseTeamResult) GetSuccess() *CourseTeam {
  if !p.IsSetSuccess() {
    return ScheduleGetCourseTeamResult_Success_DEFAULT
  }
return p.Success
}
func (p *ScheduleGetCourseTeamResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleGetCourseTeamResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetCourseTeamResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CourseTeam{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ScheduleGetCourseTeamResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCourseTeam_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetCourseTeamResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleGetCourseTeamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetCourseTeamResult(%+v)", *p)
}

// Attributes:
//  - ID
type ScheduleGetUserCourseArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewScheduleGetUserCourseArgs() *ScheduleGetUserCourseArgs {
  return &ScheduleGetUserCourseArgs{}
}


func (p *ScheduleGetUserCourseArgs) GetID() int64 {
  return p.ID
}
func (p *ScheduleGetUserCourseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetUserCourseArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ScheduleGetUserCourseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserCourse_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetUserCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ScheduleGetUserCourseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetUserCourseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleGetUserCourseResult struct {
  Success *UserCourse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleGetUserCourseResult() *ScheduleGetUserCourseResult {
  return &ScheduleGetUserCourseResult{}
}

var ScheduleGetUserCourseResult_Success_DEFAULT *UserCourse
func (p *ScheduleGetUserCourseResult) GetSuccess() *UserCourse {
  if !p.IsSetSuccess() {
    return ScheduleGetUserCourseResult_Success_DEFAULT
  }
return p.Success
}
func (p *ScheduleGetUserCourseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleGetUserCourseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetUserCourseResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserCourse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ScheduleGetUserCourseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserCourse_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetUserCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleGetUserCourseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetUserCourseResult(%+v)", *p)
}

// Attributes:
//  - GymId
//  - TrainerId
//  - CourseId
//  - UserId
//  - CourseType
type ScheduleGetUserCourseByTypeArgs struct {
  GymId int64 `thrift:"gymId,1" db:"gymId" json:"gymId"`
  TrainerId int64 `thrift:"trainerId,2" db:"trainerId" json:"trainerId"`
  CourseId int64 `thrift:"courseId,3" db:"courseId" json:"courseId"`
  UserId int64 `thrift:"userId,4" db:"userId" json:"userId"`
  CourseType int8 `thrift:"courseType,5" db:"courseType" json:"courseType"`
}

func NewScheduleGetUserCourseByTypeArgs() *ScheduleGetUserCourseByTypeArgs {
  return &ScheduleGetUserCourseByTypeArgs{}
}


func (p *ScheduleGetUserCourseByTypeArgs) GetGymId() int64 {
  return p.GymId
}

func (p *ScheduleGetUserCourseByTypeArgs) GetTrainerId() int64 {
  return p.TrainerId
}

func (p *ScheduleGetUserCourseByTypeArgs) GetCourseId() int64 {
  return p.CourseId
}

func (p *ScheduleGetUserCourseByTypeArgs) GetUserId() int64 {
  return p.UserId
}

func (p *ScheduleGetUserCourseByTypeArgs) GetCourseType() int8 {
  return p.CourseType
}
func (p *ScheduleGetUserCourseByTypeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetUserCourseByTypeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GymId = v
}
  return nil
}

func (p *ScheduleGetUserCourseByTypeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TrainerId = v
}
  return nil
}

func (p *ScheduleGetUserCourseByTypeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CourseId = v
}
  return nil
}

func (p *ScheduleGetUserCourseByTypeArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *ScheduleGetUserCourseByTypeArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.CourseType = temp
}
  return nil
}

func (p *ScheduleGetUserCourseByTypeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserCourseByType_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetUserCourseByTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gymId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gymId: ", p), err) }
  if err := oprot.WriteI64(int64(p.GymId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gymId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gymId: ", p), err) }
  return err
}

func (p *ScheduleGetUserCourseByTypeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trainerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.TrainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trainerId: ", p), err) }
  return err
}

func (p *ScheduleGetUserCourseByTypeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("courseId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:courseId: ", p), err) }
  if err := oprot.WriteI64(int64(p.CourseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.courseId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:courseId: ", p), err) }
  return err
}

func (p *ScheduleGetUserCourseByTypeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userId: ", p), err) }
  return err
}

func (p *ScheduleGetUserCourseByTypeArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("courseType", thrift.BYTE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:courseType: ", p), err) }
  if err := oprot.WriteByte(int8(p.CourseType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.courseType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:courseType: ", p), err) }
  return err
}

func (p *ScheduleGetUserCourseByTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetUserCourseByTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleGetUserCourseByTypeResult struct {
  Success *UserCourse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleGetUserCourseByTypeResult() *ScheduleGetUserCourseByTypeResult {
  return &ScheduleGetUserCourseByTypeResult{}
}

var ScheduleGetUserCourseByTypeResult_Success_DEFAULT *UserCourse
func (p *ScheduleGetUserCourseByTypeResult) GetSuccess() *UserCourse {
  if !p.IsSetSuccess() {
    return ScheduleGetUserCourseByTypeResult_Success_DEFAULT
  }
return p.Success
}
func (p *ScheduleGetUserCourseByTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleGetUserCourseByTypeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetUserCourseByTypeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserCourse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ScheduleGetUserCourseByTypeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserCourseByType_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetUserCourseByTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleGetUserCourseByTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetUserCourseByTypeResult(%+v)", *p)
}

// Attributes:
//  - ID
type ScheduleGetCoursePersonalArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewScheduleGetCoursePersonalArgs() *ScheduleGetCoursePersonalArgs {
  return &ScheduleGetCoursePersonalArgs{}
}


func (p *ScheduleGetCoursePersonalArgs) GetID() int64 {
  return p.ID
}
func (p *ScheduleGetCoursePersonalArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetCoursePersonalArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ScheduleGetCoursePersonalArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCoursePersonal_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetCoursePersonalArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ScheduleGetCoursePersonalArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetCoursePersonalArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleGetCoursePersonalResult struct {
  Success *CoursePersonal `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleGetCoursePersonalResult() *ScheduleGetCoursePersonalResult {
  return &ScheduleGetCoursePersonalResult{}
}

var ScheduleGetCoursePersonalResult_Success_DEFAULT *CoursePersonal
func (p *ScheduleGetCoursePersonalResult) GetSuccess() *CoursePersonal {
  if !p.IsSetSuccess() {
    return ScheduleGetCoursePersonalResult_Success_DEFAULT
  }
return p.Success
}
func (p *ScheduleGetCoursePersonalResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleGetCoursePersonalResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetCoursePersonalResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CoursePersonal{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ScheduleGetCoursePersonalResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCoursePersonal_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetCoursePersonalResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleGetCoursePersonalResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetCoursePersonalResult(%+v)", *p)
}

// Attributes:
//  - ID
type ScheduleGetReservationArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewScheduleGetReservationArgs() *ScheduleGetReservationArgs {
  return &ScheduleGetReservationArgs{}
}


func (p *ScheduleGetReservationArgs) GetID() int64 {
  return p.ID
}
func (p *ScheduleGetReservationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetReservationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ScheduleGetReservationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetReservation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetReservationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ScheduleGetReservationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetReservationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleGetReservationResult struct {
  Success *Reservation `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleGetReservationResult() *ScheduleGetReservationResult {
  return &ScheduleGetReservationResult{}
}

var ScheduleGetReservationResult_Success_DEFAULT *Reservation
func (p *ScheduleGetReservationResult) GetSuccess() *Reservation {
  if !p.IsSetSuccess() {
    return ScheduleGetReservationResult_Success_DEFAULT
  }
return p.Success
}
func (p *ScheduleGetReservationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleGetReservationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetReservationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Reservation{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ScheduleGetReservationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetReservation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetReservationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleGetReservationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetReservationResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - StartTime
//  - CourseType
type ScheduleGetUserReservationByCourseArgs struct {
  UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
  StartTime int64 `thrift:"startTime,2" db:"startTime" json:"startTime"`
  CourseType int8 `thrift:"courseType,3" db:"courseType" json:"courseType"`
}

func NewScheduleGetUserReservationByCourseArgs() *ScheduleGetUserReservationByCourseArgs {
  return &ScheduleGetUserReservationByCourseArgs{}
}


func (p *ScheduleGetUserReservationByCourseArgs) GetUserId() int64 {
  return p.UserId
}

func (p *ScheduleGetUserReservationByCourseArgs) GetStartTime() int64 {
  return p.StartTime
}

func (p *ScheduleGetUserReservationByCourseArgs) GetCourseType() int8 {
  return p.CourseType
}
func (p *ScheduleGetUserReservationByCourseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetUserReservationByCourseArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *ScheduleGetUserReservationByCourseArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *ScheduleGetUserReservationByCourseArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.CourseType = temp
}
  return nil
}

func (p *ScheduleGetUserReservationByCourseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserReservationByCourse_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetUserReservationByCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *ScheduleGetUserReservationByCourseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startTime: ", p), err) }
  return err
}

func (p *ScheduleGetUserReservationByCourseArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("courseType", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:courseType: ", p), err) }
  if err := oprot.WriteByte(int8(p.CourseType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.courseType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:courseType: ", p), err) }
  return err
}

func (p *ScheduleGetUserReservationByCourseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetUserReservationByCourseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleGetUserReservationByCourseResult struct {
  Success *Reservation `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleGetUserReservationByCourseResult() *ScheduleGetUserReservationByCourseResult {
  return &ScheduleGetUserReservationByCourseResult{}
}

var ScheduleGetUserReservationByCourseResult_Success_DEFAULT *Reservation
func (p *ScheduleGetUserReservationByCourseResult) GetSuccess() *Reservation {
  if !p.IsSetSuccess() {
    return ScheduleGetUserReservationByCourseResult_Success_DEFAULT
  }
return p.Success
}
func (p *ScheduleGetUserReservationByCourseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleGetUserReservationByCourseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetUserReservationByCourseResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Reservation{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ScheduleGetUserReservationByCourseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserReservationByCourse_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetUserReservationByCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleGetUserReservationByCourseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetUserReservationByCourseResult(%+v)", *p)
}

// Attributes:
//  - ScheduleId
type ScheduleGetReservationsByScheduleArgs struct {
  ScheduleId int64 `thrift:"scheduleId,1" db:"scheduleId" json:"scheduleId"`
}

func NewScheduleGetReservationsByScheduleArgs() *ScheduleGetReservationsByScheduleArgs {
  return &ScheduleGetReservationsByScheduleArgs{}
}


func (p *ScheduleGetReservationsByScheduleArgs) GetScheduleId() int64 {
  return p.ScheduleId
}
func (p *ScheduleGetReservationsByScheduleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetReservationsByScheduleArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ScheduleId = v
}
  return nil
}

func (p *ScheduleGetReservationsByScheduleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetReservationsBySchedule_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetReservationsByScheduleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scheduleId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ScheduleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scheduleId: ", p), err) }
  return err
}

func (p *ScheduleGetReservationsByScheduleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetReservationsByScheduleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleGetReservationsByScheduleResult struct {
  Success []*Reservation `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleGetReservationsByScheduleResult() *ScheduleGetReservationsByScheduleResult {
  return &ScheduleGetReservationsByScheduleResult{}
}

var ScheduleGetReservationsByScheduleResult_Success_DEFAULT []*Reservation

func (p *ScheduleGetReservationsByScheduleResult) GetSuccess() []*Reservation {
  return p.Success
}
func (p *ScheduleGetReservationsByScheduleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleGetReservationsByScheduleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetReservationsByScheduleResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Reservation, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem42 := &Reservation{}
    if err := _elem42.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
    }
    p.Success = append(p.Success, _elem42)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScheduleGetReservationsByScheduleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetReservationsBySchedule_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetReservationsByScheduleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleGetReservationsByScheduleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetReservationsByScheduleResult(%+v)", *p)
}

// Attributes:
//  - GymId
//  - TrainerType
//  - TrainerName
//  - Phone
type ScheduleGetTrainersByGymArgs struct {
  GymId int64 `thrift:"gymId,1" db:"gymId" json:"gymId"`
  TrainerType int8 `thrift:"trainerType,2" db:"trainerType" json:"trainerType"`
  TrainerName string `thrift:"trainerName,3" db:"trainerName" json:"trainerName"`
  Phone string `thrift:"phone,4" db:"phone" json:"phone"`
}

func NewScheduleGetTrainersByGymArgs() *ScheduleGetTrainersByGymArgs {
  return &ScheduleGetTrainersByGymArgs{}
}


func (p *ScheduleGetTrainersByGymArgs) GetGymId() int64 {
  return p.GymId
}

func (p *ScheduleGetTrainersByGymArgs) GetTrainerType() int8 {
  return p.TrainerType
}

func (p *ScheduleGetTrainersByGymArgs) GetTrainerName() string {
  return p.TrainerName
}

func (p *ScheduleGetTrainersByGymArgs) GetPhone() string {
  return p.Phone
}
func (p *ScheduleGetTrainersByGymArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetTrainersByGymArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GymId = v
}
  return nil
}

func (p *ScheduleGetTrainersByGymArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.TrainerType = temp
}
  return nil
}

func (p *ScheduleGetTrainersByGymArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TrainerName = v
}
  return nil
}

func (p *ScheduleGetTrainersByGymArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *ScheduleGetTrainersByGymArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTrainersByGym_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetTrainersByGymArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gymId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gymId: ", p), err) }
  if err := oprot.WriteI64(int64(p.GymId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gymId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gymId: ", p), err) }
  return err
}

func (p *ScheduleGetTrainersByGymArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerType", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trainerType: ", p), err) }
  if err := oprot.WriteByte(int8(p.TrainerType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trainerType: ", p), err) }
  return err
}

func (p *ScheduleGetTrainersByGymArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:trainerName: ", p), err) }
  if err := oprot.WriteString(string(p.TrainerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:trainerName: ", p), err) }
  return err
}

func (p *ScheduleGetTrainersByGymArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:phone: ", p), err) }
  return err
}

func (p *ScheduleGetTrainersByGymArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetTrainersByGymArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleGetTrainersByGymResult struct {
  Success []*Trainer `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleGetTrainersByGymResult() *ScheduleGetTrainersByGymResult {
  return &ScheduleGetTrainersByGymResult{}
}

var ScheduleGetTrainersByGymResult_Success_DEFAULT []*Trainer

func (p *ScheduleGetTrainersByGymResult) GetSuccess() []*Trainer {
  return p.Success
}
func (p *ScheduleGetTrainersByGymResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleGetTrainersByGymResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetTrainersByGymResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Trainer, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem43 := &Trainer{}
    if err := _elem43.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
    }
    p.Success = append(p.Success, _elem43)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScheduleGetTrainersByGymResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTrainersByGym_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetTrainersByGymResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleGetTrainersByGymResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetTrainersByGymResult(%+v)", *p)
}

// Attributes:
//  - GymId
//  - StartTime
//  - EndTime
type ScheduleGetTrainersByScheduleTimeArgs struct {
  GymId int64 `thrift:"gymId,1" db:"gymId" json:"gymId"`
  StartTime int64 `thrift:"startTime,2" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,3" db:"endTime" json:"endTime"`
}

func NewScheduleGetTrainersByScheduleTimeArgs() *ScheduleGetTrainersByScheduleTimeArgs {
  return &ScheduleGetTrainersByScheduleTimeArgs{}
}


func (p *ScheduleGetTrainersByScheduleTimeArgs) GetGymId() int64 {
  return p.GymId
}

func (p *ScheduleGetTrainersByScheduleTimeArgs) GetStartTime() int64 {
  return p.StartTime
}

func (p *ScheduleGetTrainersByScheduleTimeArgs) GetEndTime() int64 {
  return p.EndTime
}
func (p *ScheduleGetTrainersByScheduleTimeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetTrainersByScheduleTimeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GymId = v
}
  return nil
}

func (p *ScheduleGetTrainersByScheduleTimeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *ScheduleGetTrainersByScheduleTimeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *ScheduleGetTrainersByScheduleTimeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTrainersByScheduleTime_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetTrainersByScheduleTimeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gymId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gymId: ", p), err) }
  if err := oprot.WriteI64(int64(p.GymId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gymId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gymId: ", p), err) }
  return err
}

func (p *ScheduleGetTrainersByScheduleTimeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startTime: ", p), err) }
  return err
}

func (p *ScheduleGetTrainersByScheduleTimeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endTime: ", p), err) }
  return err
}

func (p *ScheduleGetTrainersByScheduleTimeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetTrainersByScheduleTimeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleGetTrainersByScheduleTimeResult struct {
  Success []*Trainer `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleGetTrainersByScheduleTimeResult() *ScheduleGetTrainersByScheduleTimeResult {
  return &ScheduleGetTrainersByScheduleTimeResult{}
}

var ScheduleGetTrainersByScheduleTimeResult_Success_DEFAULT []*Trainer

func (p *ScheduleGetTrainersByScheduleTimeResult) GetSuccess() []*Trainer {
  return p.Success
}
func (p *ScheduleGetTrainersByScheduleTimeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleGetTrainersByScheduleTimeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleGetTrainersByScheduleTimeResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Trainer, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem44 := &Trainer{}
    if err := _elem44.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem44), err)
    }
    p.Success = append(p.Success, _elem44)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScheduleGetTrainersByScheduleTimeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTrainersByScheduleTime_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleGetTrainersByScheduleTimeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleGetTrainersByScheduleTimeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleGetTrainersByScheduleTimeResult(%+v)", *p)
}

// Attributes:
//  - ScheduleId
type ScheduleIsEnReservationArgs struct {
  ScheduleId int64 `thrift:"scheduleId,1" db:"scheduleId" json:"scheduleId"`
}

func NewScheduleIsEnReservationArgs() *ScheduleIsEnReservationArgs {
  return &ScheduleIsEnReservationArgs{}
}


func (p *ScheduleIsEnReservationArgs) GetScheduleId() int64 {
  return p.ScheduleId
}
func (p *ScheduleIsEnReservationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleIsEnReservationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ScheduleId = v
}
  return nil
}

func (p *ScheduleIsEnReservationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IsEnReservation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleIsEnReservationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scheduleId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ScheduleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scheduleId: ", p), err) }
  return err
}

func (p *ScheduleIsEnReservationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleIsEnReservationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleIsEnReservationResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleIsEnReservationResult() *ScheduleIsEnReservationResult {
  return &ScheduleIsEnReservationResult{}
}

var ScheduleIsEnReservationResult_Success_DEFAULT bool
func (p *ScheduleIsEnReservationResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ScheduleIsEnReservationResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ScheduleIsEnReservationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleIsEnReservationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleIsEnReservationResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ScheduleIsEnReservationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IsEnReservation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleIsEnReservationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleIsEnReservationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleIsEnReservationResult(%+v)", *p)
}

// Attributes:
//  - G
//  - Ct
//  - StartTime
//  - EndTime
//  - TrainerId
//  - TrainerName
//  - AssistantTrainerId
//  - AssistantTrainerName
//  - Num
type ScheduleAddLittleTeamCourseArgs struct {
  G *Gym `thrift:"g,1" db:"g" json:"g"`
  Ct *CourseTeam `thrift:"ct,2" db:"ct" json:"ct"`
  StartTime int64 `thrift:"startTime,3" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,4" db:"endTime" json:"endTime"`
  TrainerId int64 `thrift:"trainerId,5" db:"trainerId" json:"trainerId"`
  TrainerName string `thrift:"trainerName,6" db:"trainerName" json:"trainerName"`
  AssistantTrainerId int64 `thrift:"assistantTrainerId,7" db:"assistantTrainerId" json:"assistantTrainerId"`
  AssistantTrainerName string `thrift:"assistantTrainerName,8" db:"assistantTrainerName" json:"assistantTrainerName"`
  Num int8 `thrift:"num,9" db:"num" json:"num"`
}

func NewScheduleAddLittleTeamCourseArgs() *ScheduleAddLittleTeamCourseArgs {
  return &ScheduleAddLittleTeamCourseArgs{}
}

var ScheduleAddLittleTeamCourseArgs_G_DEFAULT *Gym
func (p *ScheduleAddLittleTeamCourseArgs) GetG() *Gym {
  if !p.IsSetG() {
    return ScheduleAddLittleTeamCourseArgs_G_DEFAULT
  }
return p.G
}
var ScheduleAddLittleTeamCourseArgs_Ct_DEFAULT *CourseTeam
func (p *ScheduleAddLittleTeamCourseArgs) GetCt() *CourseTeam {
  if !p.IsSetCt() {
    return ScheduleAddLittleTeamCourseArgs_Ct_DEFAULT
  }
return p.Ct
}

func (p *ScheduleAddLittleTeamCourseArgs) GetStartTime() int64 {
  return p.StartTime
}

func (p *ScheduleAddLittleTeamCourseArgs) GetEndTime() int64 {
  return p.EndTime
}

func (p *ScheduleAddLittleTeamCourseArgs) GetTrainerId() int64 {
  return p.TrainerId
}

func (p *ScheduleAddLittleTeamCourseArgs) GetTrainerName() string {
  return p.TrainerName
}

func (p *ScheduleAddLittleTeamCourseArgs) GetAssistantTrainerId() int64 {
  return p.AssistantTrainerId
}

func (p *ScheduleAddLittleTeamCourseArgs) GetAssistantTrainerName() string {
  return p.AssistantTrainerName
}

func (p *ScheduleAddLittleTeamCourseArgs) GetNum() int8 {
  return p.Num
}
func (p *ScheduleAddLittleTeamCourseArgs) IsSetG() bool {
  return p.G != nil
}

func (p *ScheduleAddLittleTeamCourseArgs) IsSetCt() bool {
  return p.Ct != nil
}

func (p *ScheduleAddLittleTeamCourseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleAddLittleTeamCourseArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.G = &Gym{}
  if err := p.G.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.G), err)
  }
  return nil
}

func (p *ScheduleAddLittleTeamCourseArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Ct = &CourseTeam{}
  if err := p.Ct.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ct), err)
  }
  return nil
}

func (p *ScheduleAddLittleTeamCourseArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *ScheduleAddLittleTeamCourseArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *ScheduleAddLittleTeamCourseArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TrainerId = v
}
  return nil
}

func (p *ScheduleAddLittleTeamCourseArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TrainerName = v
}
  return nil
}

func (p *ScheduleAddLittleTeamCourseArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.AssistantTrainerId = v
}
  return nil
}

func (p *ScheduleAddLittleTeamCourseArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AssistantTrainerName = v
}
  return nil
}

func (p *ScheduleAddLittleTeamCourseArgs)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := int8(v)
  p.Num = temp
}
  return nil
}

func (p *ScheduleAddLittleTeamCourseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddLittleTeamCourse_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleAddLittleTeamCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("g", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:g: ", p), err) }
  if err := p.G.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.G), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:g: ", p), err) }
  return err
}

func (p *ScheduleAddLittleTeamCourseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ct", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ct: ", p), err) }
  if err := p.Ct.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ct), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ct: ", p), err) }
  return err
}

func (p *ScheduleAddLittleTeamCourseArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err) }
  return err
}

func (p *ScheduleAddLittleTeamCourseArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err) }
  return err
}

func (p *ScheduleAddLittleTeamCourseArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerId", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:trainerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.TrainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:trainerId: ", p), err) }
  return err
}

func (p *ScheduleAddLittleTeamCourseArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:trainerName: ", p), err) }
  if err := oprot.WriteString(string(p.TrainerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:trainerName: ", p), err) }
  return err
}

func (p *ScheduleAddLittleTeamCourseArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("assistantTrainerId", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:assistantTrainerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.AssistantTrainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.assistantTrainerId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:assistantTrainerId: ", p), err) }
  return err
}

func (p *ScheduleAddLittleTeamCourseArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("assistantTrainerName", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:assistantTrainerName: ", p), err) }
  if err := oprot.WriteString(string(p.AssistantTrainerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.assistantTrainerName (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:assistantTrainerName: ", p), err) }
  return err
}

func (p *ScheduleAddLittleTeamCourseArgs) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num", thrift.BYTE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:num: ", p), err) }
  if err := oprot.WriteByte(int8(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:num: ", p), err) }
  return err
}

func (p *ScheduleAddLittleTeamCourseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleAddLittleTeamCourseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleAddLittleTeamCourseResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleAddLittleTeamCourseResult() *ScheduleAddLittleTeamCourseResult {
  return &ScheduleAddLittleTeamCourseResult{}
}

var ScheduleAddLittleTeamCourseResult_Success_DEFAULT int64
func (p *ScheduleAddLittleTeamCourseResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return ScheduleAddLittleTeamCourseResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ScheduleAddLittleTeamCourseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleAddLittleTeamCourseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleAddLittleTeamCourseResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ScheduleAddLittleTeamCourseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddLittleTeamCourse_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleAddLittleTeamCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleAddLittleTeamCourseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleAddLittleTeamCourseResult(%+v)", *p)
}

// Attributes:
//  - G
//  - Ct
//  - ScheduleId
//  - StartTime
//  - EndTime
//  - TrainerId
//  - TrainerName
//  - ScheduleTrainerId
//  - AssistantTrainerId
//  - AssistantTrainerName
//  - Num
type SchedulePutLittleTeamCourseArgs struct {
  G *Gym `thrift:"g,1" db:"g" json:"g"`
  Ct *CourseTeam `thrift:"ct,2" db:"ct" json:"ct"`
  ScheduleId int64 `thrift:"scheduleId,3" db:"scheduleId" json:"scheduleId"`
  StartTime int64 `thrift:"startTime,4" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,5" db:"endTime" json:"endTime"`
  TrainerId int64 `thrift:"trainerId,6" db:"trainerId" json:"trainerId"`
  TrainerName string `thrift:"trainerName,7" db:"trainerName" json:"trainerName"`
  ScheduleTrainerId int64 `thrift:"scheduleTrainerId,8" db:"scheduleTrainerId" json:"scheduleTrainerId"`
  AssistantTrainerId int64 `thrift:"assistantTrainerId,9" db:"assistantTrainerId" json:"assistantTrainerId"`
  AssistantTrainerName string `thrift:"assistantTrainerName,10" db:"assistantTrainerName" json:"assistantTrainerName"`
  Num int8 `thrift:"num,11" db:"num" json:"num"`
}

func NewSchedulePutLittleTeamCourseArgs() *SchedulePutLittleTeamCourseArgs {
  return &SchedulePutLittleTeamCourseArgs{}
}

var SchedulePutLittleTeamCourseArgs_G_DEFAULT *Gym
func (p *SchedulePutLittleTeamCourseArgs) GetG() *Gym {
  if !p.IsSetG() {
    return SchedulePutLittleTeamCourseArgs_G_DEFAULT
  }
return p.G
}
var SchedulePutLittleTeamCourseArgs_Ct_DEFAULT *CourseTeam
func (p *SchedulePutLittleTeamCourseArgs) GetCt() *CourseTeam {
  if !p.IsSetCt() {
    return SchedulePutLittleTeamCourseArgs_Ct_DEFAULT
  }
return p.Ct
}

func (p *SchedulePutLittleTeamCourseArgs) GetScheduleId() int64 {
  return p.ScheduleId
}

func (p *SchedulePutLittleTeamCourseArgs) GetStartTime() int64 {
  return p.StartTime
}

func (p *SchedulePutLittleTeamCourseArgs) GetEndTime() int64 {
  return p.EndTime
}

func (p *SchedulePutLittleTeamCourseArgs) GetTrainerId() int64 {
  return p.TrainerId
}

func (p *SchedulePutLittleTeamCourseArgs) GetTrainerName() string {
  return p.TrainerName
}

func (p *SchedulePutLittleTeamCourseArgs) GetScheduleTrainerId() int64 {
  return p.ScheduleTrainerId
}

func (p *SchedulePutLittleTeamCourseArgs) GetAssistantTrainerId() int64 {
  return p.AssistantTrainerId
}

func (p *SchedulePutLittleTeamCourseArgs) GetAssistantTrainerName() string {
  return p.AssistantTrainerName
}

func (p *SchedulePutLittleTeamCourseArgs) GetNum() int8 {
  return p.Num
}
func (p *SchedulePutLittleTeamCourseArgs) IsSetG() bool {
  return p.G != nil
}

func (p *SchedulePutLittleTeamCourseArgs) IsSetCt() bool {
  return p.Ct != nil
}

func (p *SchedulePutLittleTeamCourseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.G = &Gym{}
  if err := p.G.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.G), err)
  }
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Ct = &CourseTeam{}
  if err := p.Ct.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ct), err)
  }
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ScheduleId = v
}
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TrainerId = v
}
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TrainerName = v
}
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ScheduleTrainerId = v
}
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.AssistantTrainerId = v
}
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.AssistantTrainerName = v
}
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := int8(v)
  p.Num = temp
}
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PutLittleTeamCourse_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchedulePutLittleTeamCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("g", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:g: ", p), err) }
  if err := p.G.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.G), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:g: ", p), err) }
  return err
}

func (p *SchedulePutLittleTeamCourseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ct", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ct: ", p), err) }
  if err := p.Ct.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ct), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ct: ", p), err) }
  return err
}

func (p *SchedulePutLittleTeamCourseArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:scheduleId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ScheduleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:scheduleId: ", p), err) }
  return err
}

func (p *SchedulePutLittleTeamCourseArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startTime: ", p), err) }
  return err
}

func (p *SchedulePutLittleTeamCourseArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:endTime: ", p), err) }
  return err
}

func (p *SchedulePutLittleTeamCourseArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerId", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:trainerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.TrainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:trainerId: ", p), err) }
  return err
}

func (p *SchedulePutLittleTeamCourseArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerName", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:trainerName: ", p), err) }
  if err := oprot.WriteString(string(p.TrainerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerName (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:trainerName: ", p), err) }
  return err
}

func (p *SchedulePutLittleTeamCourseArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleTrainerId", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:scheduleTrainerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ScheduleTrainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleTrainerId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:scheduleTrainerId: ", p), err) }
  return err
}

func (p *SchedulePutLittleTeamCourseArgs) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("assistantTrainerId", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:assistantTrainerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.AssistantTrainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.assistantTrainerId (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:assistantTrainerId: ", p), err) }
  return err
}

func (p *SchedulePutLittleTeamCourseArgs) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("assistantTrainerName", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:assistantTrainerName: ", p), err) }
  if err := oprot.WriteString(string(p.AssistantTrainerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.assistantTrainerName (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:assistantTrainerName: ", p), err) }
  return err
}

func (p *SchedulePutLittleTeamCourseArgs) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num", thrift.BYTE, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:num: ", p), err) }
  if err := oprot.WriteByte(int8(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:num: ", p), err) }
  return err
}

func (p *SchedulePutLittleTeamCourseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchedulePutLittleTeamCourseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SchedulePutLittleTeamCourseResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSchedulePutLittleTeamCourseResult() *SchedulePutLittleTeamCourseResult {
  return &SchedulePutLittleTeamCourseResult{}
}

var SchedulePutLittleTeamCourseResult_Success_DEFAULT bool
func (p *SchedulePutLittleTeamCourseResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return SchedulePutLittleTeamCourseResult_Success_DEFAULT
  }
return *p.Success
}
func (p *SchedulePutLittleTeamCourseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SchedulePutLittleTeamCourseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchedulePutLittleTeamCourseResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *SchedulePutLittleTeamCourseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PutLittleTeamCourse_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchedulePutLittleTeamCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SchedulePutLittleTeamCourseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchedulePutLittleTeamCourseResult(%+v)", *p)
}

// Attributes:
//  - ScheduleId
//  - UserId
//  - UserName
//  - UserCourseId
//  - RemainTimes
type ScheduleUserReservationTeamCourseArgs struct {
  ScheduleId int64 `thrift:"scheduleId,1" db:"scheduleId" json:"scheduleId"`
  UserId int64 `thrift:"userId,2" db:"userId" json:"userId"`
  UserName string `thrift:"userName,3" db:"userName" json:"userName"`
  UserCourseId int64 `thrift:"userCourseId,4" db:"userCourseId" json:"userCourseId"`
  RemainTimes int32 `thrift:"remainTimes,5" db:"remainTimes" json:"remainTimes"`
}

func NewScheduleUserReservationTeamCourseArgs() *ScheduleUserReservationTeamCourseArgs {
  return &ScheduleUserReservationTeamCourseArgs{}
}


func (p *ScheduleUserReservationTeamCourseArgs) GetScheduleId() int64 {
  return p.ScheduleId
}

func (p *ScheduleUserReservationTeamCourseArgs) GetUserId() int64 {
  return p.UserId
}

func (p *ScheduleUserReservationTeamCourseArgs) GetUserName() string {
  return p.UserName
}

func (p *ScheduleUserReservationTeamCourseArgs) GetUserCourseId() int64 {
  return p.UserCourseId
}

func (p *ScheduleUserReservationTeamCourseArgs) GetRemainTimes() int32 {
  return p.RemainTimes
}
func (p *ScheduleUserReservationTeamCourseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleUserReservationTeamCourseArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ScheduleId = v
}
  return nil
}

func (p *ScheduleUserReservationTeamCourseArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *ScheduleUserReservationTeamCourseArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ScheduleUserReservationTeamCourseArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserCourseId = v
}
  return nil
}

func (p *ScheduleUserReservationTeamCourseArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RemainTimes = v
}
  return nil
}

func (p *ScheduleUserReservationTeamCourseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserReservationTeamCourse_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleUserReservationTeamCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scheduleId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ScheduleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scheduleId: ", p), err) }
  return err
}

func (p *ScheduleUserReservationTeamCourseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *ScheduleUserReservationTeamCourseArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userName: ", p), err) }
  return err
}

func (p *ScheduleUserReservationTeamCourseArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userCourseId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userCourseId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserCourseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userCourseId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userCourseId: ", p), err) }
  return err
}

func (p *ScheduleUserReservationTeamCourseArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remainTimes", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:remainTimes: ", p), err) }
  if err := oprot.WriteI32(int32(p.RemainTimes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remainTimes (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:remainTimes: ", p), err) }
  return err
}

func (p *ScheduleUserReservationTeamCourseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleUserReservationTeamCourseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleUserReservationTeamCourseResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleUserReservationTeamCourseResult() *ScheduleUserReservationTeamCourseResult {
  return &ScheduleUserReservationTeamCourseResult{}
}

var ScheduleUserReservationTeamCourseResult_Success_DEFAULT bool
func (p *ScheduleUserReservationTeamCourseResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ScheduleUserReservationTeamCourseResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ScheduleUserReservationTeamCourseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleUserReservationTeamCourseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleUserReservationTeamCourseResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ScheduleUserReservationTeamCourseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserReservationTeamCourse_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleUserReservationTeamCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleUserReservationTeamCourseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleUserReservationTeamCourseResult(%+v)", *p)
}

// Attributes:
//  - G
//  - Cp
//  - U
//  - UserCourseId
//  - TrainerId
//  - TrainerName
//  - Price
//  - RemainTimes
//  - StartTime
//  - EndTime
//  - ScheduleType
type ScheduleUserReservationPersonalCourseArgs struct {
  G *Gym `thrift:"g,1" db:"g" json:"g"`
  Cp *CoursePersonal `thrift:"cp,2" db:"cp" json:"cp"`
  U *User `thrift:"u,3" db:"u" json:"u"`
  UserCourseId int64 `thrift:"userCourseId,4" db:"userCourseId" json:"userCourseId"`
  TrainerId int64 `thrift:"trainerId,5" db:"trainerId" json:"trainerId"`
  TrainerName string `thrift:"trainerName,6" db:"trainerName" json:"trainerName"`
  Price int32 `thrift:"price,7" db:"price" json:"price"`
  RemainTimes int32 `thrift:"remainTimes,8" db:"remainTimes" json:"remainTimes"`
  StartTime int64 `thrift:"startTime,9" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,10" db:"endTime" json:"endTime"`
  ScheduleType int8 `thrift:"scheduleType,11" db:"scheduleType" json:"scheduleType"`
}

func NewScheduleUserReservationPersonalCourseArgs() *ScheduleUserReservationPersonalCourseArgs {
  return &ScheduleUserReservationPersonalCourseArgs{}
}

var ScheduleUserReservationPersonalCourseArgs_G_DEFAULT *Gym
func (p *ScheduleUserReservationPersonalCourseArgs) GetG() *Gym {
  if !p.IsSetG() {
    return ScheduleUserReservationPersonalCourseArgs_G_DEFAULT
  }
return p.G
}
var ScheduleUserReservationPersonalCourseArgs_Cp_DEFAULT *CoursePersonal
func (p *ScheduleUserReservationPersonalCourseArgs) GetCp() *CoursePersonal {
  if !p.IsSetCp() {
    return ScheduleUserReservationPersonalCourseArgs_Cp_DEFAULT
  }
return p.Cp
}
var ScheduleUserReservationPersonalCourseArgs_U_DEFAULT *User
func (p *ScheduleUserReservationPersonalCourseArgs) GetU() *User {
  if !p.IsSetU() {
    return ScheduleUserReservationPersonalCourseArgs_U_DEFAULT
  }
return p.U
}

func (p *ScheduleUserReservationPersonalCourseArgs) GetUserCourseId() int64 {
  return p.UserCourseId
}

func (p *ScheduleUserReservationPersonalCourseArgs) GetTrainerId() int64 {
  return p.TrainerId
}

func (p *ScheduleUserReservationPersonalCourseArgs) GetTrainerName() string {
  return p.TrainerName
}

func (p *ScheduleUserReservationPersonalCourseArgs) GetPrice() int32 {
  return p.Price
}

func (p *ScheduleUserReservationPersonalCourseArgs) GetRemainTimes() int32 {
  return p.RemainTimes
}

func (p *ScheduleUserReservationPersonalCourseArgs) GetStartTime() int64 {
  return p.StartTime
}

func (p *ScheduleUserReservationPersonalCourseArgs) GetEndTime() int64 {
  return p.EndTime
}

func (p *ScheduleUserReservationPersonalCourseArgs) GetScheduleType() int8 {
  return p.ScheduleType
}
func (p *ScheduleUserReservationPersonalCourseArgs) IsSetG() bool {
  return p.G != nil
}

func (p *ScheduleUserReservationPersonalCourseArgs) IsSetCp() bool {
  return p.Cp != nil
}

func (p *ScheduleUserReservationPersonalCourseArgs) IsSetU() bool {
  return p.U != nil
}

func (p *ScheduleUserReservationPersonalCourseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.G = &Gym{}
  if err := p.G.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.G), err)
  }
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Cp = &CoursePersonal{}
  if err := p.Cp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cp), err)
  }
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.U = &User{}
  if err := p.U.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.U), err)
  }
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserCourseId = v
}
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TrainerId = v
}
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TrainerName = v
}
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RemainTimes = v
}
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := int8(v)
  p.ScheduleType = temp
}
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserReservationPersonalCourse_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleUserReservationPersonalCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("g", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:g: ", p), err) }
  if err := p.G.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.G), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:g: ", p), err) }
  return err
}

func (p *ScheduleUserReservationPersonalCourseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cp: ", p), err) }
  if err := p.Cp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cp: ", p), err) }
  return err
}

func (p *ScheduleUserReservationPersonalCourseArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("u", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:u: ", p), err) }
  if err := p.U.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.U), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:u: ", p), err) }
  return err
}

func (p *ScheduleUserReservationPersonalCourseArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userCourseId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userCourseId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserCourseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userCourseId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userCourseId: ", p), err) }
  return err
}

func (p *ScheduleUserReservationPersonalCourseArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerId", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:trainerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.TrainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:trainerId: ", p), err) }
  return err
}

func (p *ScheduleUserReservationPersonalCourseArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:trainerName: ", p), err) }
  if err := oprot.WriteString(string(p.TrainerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:trainerName: ", p), err) }
  return err
}

func (p *ScheduleUserReservationPersonalCourseArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:price: ", p), err) }
  if err := oprot.WriteI32(int32(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.price (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:price: ", p), err) }
  return err
}

func (p *ScheduleUserReservationPersonalCourseArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remainTimes", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:remainTimes: ", p), err) }
  if err := oprot.WriteI32(int32(p.RemainTimes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remainTimes (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:remainTimes: ", p), err) }
  return err
}

func (p *ScheduleUserReservationPersonalCourseArgs) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startTime: ", p), err) }
  return err
}

func (p *ScheduleUserReservationPersonalCourseArgs) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:endTime: ", p), err) }
  return err
}

func (p *ScheduleUserReservationPersonalCourseArgs) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleType", thrift.BYTE, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:scheduleType: ", p), err) }
  if err := oprot.WriteByte(int8(p.ScheduleType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleType (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:scheduleType: ", p), err) }
  return err
}

func (p *ScheduleUserReservationPersonalCourseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleUserReservationPersonalCourseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleUserReservationPersonalCourseResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleUserReservationPersonalCourseResult() *ScheduleUserReservationPersonalCourseResult {
  return &ScheduleUserReservationPersonalCourseResult{}
}

var ScheduleUserReservationPersonalCourseResult_Success_DEFAULT int64
func (p *ScheduleUserReservationPersonalCourseResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return ScheduleUserReservationPersonalCourseResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ScheduleUserReservationPersonalCourseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleUserReservationPersonalCourseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleUserReservationPersonalCourseResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ScheduleUserReservationPersonalCourseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserReservationPersonalCourse_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleUserReservationPersonalCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleUserReservationPersonalCourseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleUserReservationPersonalCourseResult(%+v)", *p)
}

// Attributes:
//  - G
//  - Cp
//  - U
//  - UserCourseId
//  - TrainerId
//  - TrainerName
//  - Price
//  - RemainTimes
//  - StartTime
//  - EndTime
//  - Remark
//  - ActionIds
type ScheduleTrainerReservationPersonalCourseArgs struct {
  G *Gym `thrift:"g,1" db:"g" json:"g"`
  Cp *CoursePersonal `thrift:"cp,2" db:"cp" json:"cp"`
  U *User `thrift:"u,3" db:"u" json:"u"`
  UserCourseId int64 `thrift:"userCourseId,4" db:"userCourseId" json:"userCourseId"`
  TrainerId int64 `thrift:"trainerId,5" db:"trainerId" json:"trainerId"`
  TrainerName string `thrift:"trainerName,6" db:"trainerName" json:"trainerName"`
  Price int32 `thrift:"price,7" db:"price" json:"price"`
  RemainTimes int32 `thrift:"remainTimes,8" db:"remainTimes" json:"remainTimes"`
  StartTime int64 `thrift:"startTime,9" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,10" db:"endTime" json:"endTime"`
  Remark string `thrift:"remark,11" db:"remark" json:"remark"`
  ActionIds []int64 `thrift:"actionIds,12" db:"actionIds" json:"actionIds"`
}

func NewScheduleTrainerReservationPersonalCourseArgs() *ScheduleTrainerReservationPersonalCourseArgs {
  return &ScheduleTrainerReservationPersonalCourseArgs{}
}

var ScheduleTrainerReservationPersonalCourseArgs_G_DEFAULT *Gym
func (p *ScheduleTrainerReservationPersonalCourseArgs) GetG() *Gym {
  if !p.IsSetG() {
    return ScheduleTrainerReservationPersonalCourseArgs_G_DEFAULT
  }
return p.G
}
var ScheduleTrainerReservationPersonalCourseArgs_Cp_DEFAULT *CoursePersonal
func (p *ScheduleTrainerReservationPersonalCourseArgs) GetCp() *CoursePersonal {
  if !p.IsSetCp() {
    return ScheduleTrainerReservationPersonalCourseArgs_Cp_DEFAULT
  }
return p.Cp
}
var ScheduleTrainerReservationPersonalCourseArgs_U_DEFAULT *User
func (p *ScheduleTrainerReservationPersonalCourseArgs) GetU() *User {
  if !p.IsSetU() {
    return ScheduleTrainerReservationPersonalCourseArgs_U_DEFAULT
  }
return p.U
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) GetUserCourseId() int64 {
  return p.UserCourseId
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) GetTrainerId() int64 {
  return p.TrainerId
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) GetTrainerName() string {
  return p.TrainerName
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) GetPrice() int32 {
  return p.Price
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) GetRemainTimes() int32 {
  return p.RemainTimes
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) GetStartTime() int64 {
  return p.StartTime
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) GetEndTime() int64 {
  return p.EndTime
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) GetRemark() string {
  return p.Remark
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) GetActionIds() []int64 {
  return p.ActionIds
}
func (p *ScheduleTrainerReservationPersonalCourseArgs) IsSetG() bool {
  return p.G != nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) IsSetCp() bool {
  return p.Cp != nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) IsSetU() bool {
  return p.U != nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.G = &Gym{}
  if err := p.G.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.G), err)
  }
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Cp = &CoursePersonal{}
  if err := p.Cp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cp), err)
  }
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.U = &User{}
  if err := p.U.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.U), err)
  }
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserCourseId = v
}
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TrainerId = v
}
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TrainerName = v
}
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RemainTimes = v
}
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.ActionIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem45 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem45 = v
}
    p.ActionIds = append(p.ActionIds, _elem45)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TrainerReservationPersonalCourse_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("g", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:g: ", p), err) }
  if err := p.G.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.G), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:g: ", p), err) }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cp", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cp: ", p), err) }
  if err := p.Cp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cp: ", p), err) }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("u", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:u: ", p), err) }
  if err := p.U.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.U), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:u: ", p), err) }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userCourseId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userCourseId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserCourseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userCourseId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userCourseId: ", p), err) }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerId", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:trainerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.TrainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:trainerId: ", p), err) }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:trainerName: ", p), err) }
  if err := oprot.WriteString(string(p.TrainerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:trainerName: ", p), err) }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:price: ", p), err) }
  if err := oprot.WriteI32(int32(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.price (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:price: ", p), err) }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remainTimes", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:remainTimes: ", p), err) }
  if err := oprot.WriteI32(int32(p.RemainTimes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remainTimes (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:remainTimes: ", p), err) }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startTime: ", p), err) }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:endTime: ", p), err) }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:remark: ", p), err) }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("actionIds", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:actionIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.ActionIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ActionIds {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:actionIds: ", p), err) }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleTrainerReservationPersonalCourseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleTrainerReservationPersonalCourseResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleTrainerReservationPersonalCourseResult() *ScheduleTrainerReservationPersonalCourseResult {
  return &ScheduleTrainerReservationPersonalCourseResult{}
}

var ScheduleTrainerReservationPersonalCourseResult_Success_DEFAULT int64
func (p *ScheduleTrainerReservationPersonalCourseResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return ScheduleTrainerReservationPersonalCourseResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ScheduleTrainerReservationPersonalCourseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleTrainerReservationPersonalCourseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TrainerReservationPersonalCourse_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleTrainerReservationPersonalCourseResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleTrainerReservationPersonalCourseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleTrainerReservationPersonalCourseResult(%+v)", *p)
}

// Attributes:
//  - ScheduleId
//  - Rs
type ScheduleCancelScheduleArgs struct {
  ScheduleId int64 `thrift:"scheduleId,1" db:"scheduleId" json:"scheduleId"`
  Rs []*Reservation `thrift:"rs,2" db:"rs" json:"rs"`
}

func NewScheduleCancelScheduleArgs() *ScheduleCancelScheduleArgs {
  return &ScheduleCancelScheduleArgs{}
}


func (p *ScheduleCancelScheduleArgs) GetScheduleId() int64 {
  return p.ScheduleId
}

func (p *ScheduleCancelScheduleArgs) GetRs() []*Reservation {
  return p.Rs
}
func (p *ScheduleCancelScheduleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleCancelScheduleArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ScheduleId = v
}
  return nil
}

func (p *ScheduleCancelScheduleArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Reservation, 0, size)
  p.Rs =  tSlice
  for i := 0; i < size; i ++ {
    _elem46 := &Reservation{}
    if err := _elem46.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem46), err)
    }
    p.Rs = append(p.Rs, _elem46)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScheduleCancelScheduleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CancelSchedule_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleCancelScheduleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scheduleId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ScheduleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scheduleId: ", p), err) }
  return err
}

func (p *ScheduleCancelScheduleArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rs: ", p), err) }
  return err
}

func (p *ScheduleCancelScheduleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleCancelScheduleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleCancelScheduleResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleCancelScheduleResult() *ScheduleCancelScheduleResult {
  return &ScheduleCancelScheduleResult{}
}

var ScheduleCancelScheduleResult_Success_DEFAULT bool
func (p *ScheduleCancelScheduleResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ScheduleCancelScheduleResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ScheduleCancelScheduleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleCancelScheduleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleCancelScheduleResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ScheduleCancelScheduleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CancelSchedule_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleCancelScheduleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleCancelScheduleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleCancelScheduleResult(%+v)", *p)
}

// Attributes:
//  - ScheduleId
//  - TrainerId
//  - TrainerName
//  - AssistantTrainerId
//  - AssistantTrainerName
type SchedulePutTrainerArgs struct {
  ScheduleId int64 `thrift:"scheduleId,1" db:"scheduleId" json:"scheduleId"`
  TrainerId int64 `thrift:"trainerId,2" db:"trainerId" json:"trainerId"`
  TrainerName string `thrift:"trainerName,3" db:"trainerName" json:"trainerName"`
  AssistantTrainerId int64 `thrift:"assistantTrainerId,4" db:"assistantTrainerId" json:"assistantTrainerId"`
  AssistantTrainerName string `thrift:"assistantTrainerName,5" db:"assistantTrainerName" json:"assistantTrainerName"`
}

func NewSchedulePutTrainerArgs() *SchedulePutTrainerArgs {
  return &SchedulePutTrainerArgs{}
}


func (p *SchedulePutTrainerArgs) GetScheduleId() int64 {
  return p.ScheduleId
}

func (p *SchedulePutTrainerArgs) GetTrainerId() int64 {
  return p.TrainerId
}

func (p *SchedulePutTrainerArgs) GetTrainerName() string {
  return p.TrainerName
}

func (p *SchedulePutTrainerArgs) GetAssistantTrainerId() int64 {
  return p.AssistantTrainerId
}

func (p *SchedulePutTrainerArgs) GetAssistantTrainerName() string {
  return p.AssistantTrainerName
}
func (p *SchedulePutTrainerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchedulePutTrainerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ScheduleId = v
}
  return nil
}

func (p *SchedulePutTrainerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TrainerId = v
}
  return nil
}

func (p *SchedulePutTrainerArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TrainerName = v
}
  return nil
}

func (p *SchedulePutTrainerArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AssistantTrainerId = v
}
  return nil
}

func (p *SchedulePutTrainerArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AssistantTrainerName = v
}
  return nil
}

func (p *SchedulePutTrainerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PutTrainer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchedulePutTrainerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scheduleId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ScheduleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scheduleId: ", p), err) }
  return err
}

func (p *SchedulePutTrainerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trainerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.TrainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trainerId: ", p), err) }
  return err
}

func (p *SchedulePutTrainerArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainerName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:trainerName: ", p), err) }
  if err := oprot.WriteString(string(p.TrainerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainerName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:trainerName: ", p), err) }
  return err
}

func (p *SchedulePutTrainerArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("assistantTrainerId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:assistantTrainerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.AssistantTrainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.assistantTrainerId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:assistantTrainerId: ", p), err) }
  return err
}

func (p *SchedulePutTrainerArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("assistantTrainerName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:assistantTrainerName: ", p), err) }
  if err := oprot.WriteString(string(p.AssistantTrainerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.assistantTrainerName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:assistantTrainerName: ", p), err) }
  return err
}

func (p *SchedulePutTrainerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchedulePutTrainerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SchedulePutTrainerResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSchedulePutTrainerResult() *SchedulePutTrainerResult {
  return &SchedulePutTrainerResult{}
}

var SchedulePutTrainerResult_Success_DEFAULT bool
func (p *SchedulePutTrainerResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return SchedulePutTrainerResult_Success_DEFAULT
  }
return *p.Success
}
func (p *SchedulePutTrainerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SchedulePutTrainerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchedulePutTrainerResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *SchedulePutTrainerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PutTrainer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchedulePutTrainerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SchedulePutTrainerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchedulePutTrainerResult(%+v)", *p)
}

// Attributes:
//  - ScheduleId
//  - UserId
//  - UserCourseId
//  - RemainTimes
type ScheduleCancelReservationArgs struct {
  ScheduleId int64 `thrift:"scheduleId,1" db:"scheduleId" json:"scheduleId"`
  UserId int64 `thrift:"userId,2" db:"userId" json:"userId"`
  UserCourseId int64 `thrift:"userCourseId,3" db:"userCourseId" json:"userCourseId"`
  RemainTimes int32 `thrift:"remainTimes,4" db:"remainTimes" json:"remainTimes"`
}

func NewScheduleCancelReservationArgs() *ScheduleCancelReservationArgs {
  return &ScheduleCancelReservationArgs{}
}


func (p *ScheduleCancelReservationArgs) GetScheduleId() int64 {
  return p.ScheduleId
}

func (p *ScheduleCancelReservationArgs) GetUserId() int64 {
  return p.UserId
}

func (p *ScheduleCancelReservationArgs) GetUserCourseId() int64 {
  return p.UserCourseId
}

func (p *ScheduleCancelReservationArgs) GetRemainTimes() int32 {
  return p.RemainTimes
}
func (p *ScheduleCancelReservationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleCancelReservationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ScheduleId = v
}
  return nil
}

func (p *ScheduleCancelReservationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *ScheduleCancelReservationArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserCourseId = v
}
  return nil
}

func (p *ScheduleCancelReservationArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RemainTimes = v
}
  return nil
}

func (p *ScheduleCancelReservationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CancelReservation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleCancelReservationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scheduleId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ScheduleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scheduleId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scheduleId: ", p), err) }
  return err
}

func (p *ScheduleCancelReservationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *ScheduleCancelReservationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userCourseId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userCourseId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserCourseId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userCourseId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userCourseId: ", p), err) }
  return err
}

func (p *ScheduleCancelReservationArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remainTimes", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:remainTimes: ", p), err) }
  if err := oprot.WriteI32(int32(p.RemainTimes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remainTimes (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:remainTimes: ", p), err) }
  return err
}

func (p *ScheduleCancelReservationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleCancelReservationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ScheduleCancelReservationResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewScheduleCancelReservationResult() *ScheduleCancelReservationResult {
  return &ScheduleCancelReservationResult{}
}

var ScheduleCancelReservationResult_Success_DEFAULT bool
func (p *ScheduleCancelReservationResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ScheduleCancelReservationResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ScheduleCancelReservationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ScheduleCancelReservationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScheduleCancelReservationResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ScheduleCancelReservationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CancelReservation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScheduleCancelReservationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ScheduleCancelReservationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScheduleCancelReservationResult(%+v)", *p)
}


